<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\source.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\source.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Mon Jan 19 16:46:07 2015
<BR><P>
<H3>Maximum Stack Usage =       1656 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
FATFileSystem::open(const char*, int) &rArr; f_open &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[106]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f8]">mbed_die</a><BR>
 <LI><a href="#[f9]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f6]">exit</a><BR>
 <LI><a href="#[d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">NMI_Handler</a><BR>
 <LI><a href="#[13]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">DebugMon_Handler</a><BR>
 <LI><a href="#[2b]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[48]">&lang;Func1&rang;</a> from can.o(.text) referenced 2 times from can.o(.text)
 <LI><a href="#[2b]">ADC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2c]">BOD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from main.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[37]">CANActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2e]">CAN_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2f]">DMA_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3d]">EEPROM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[27]">EINT0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[28]">EINT1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[29]">EINT2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2a]">EINT3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[31]">ENET_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3b]">GPIO_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from main.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[30]">I2S_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3a]">LCD_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[32]">MCI_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[33]">MCPWM_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from main.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[25]">PLL0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[35]">PLL1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3c]">PWM0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1f]">PWM1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[34]">QEI_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[26]">RTC_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[23]">SSP0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[24]">SSP1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[39]">SSP2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from hal_cm4.o(.emb_text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[3e]">SystemInit</a> from system_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[17]">TIMER0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1a]">TIMER3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[1e]">UART3_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[38]">UART4_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[36]">USBActivity_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[2d]">USB_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from main.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from startup_lpc407x_8x_177x_8x.o(.text) referenced from startup_lpc407x_8x_177x_8x.o(RESET)
 <LI><a href="#[251]">CANIRQHandler()</a> from busprotocol.o(.text) referenced from busprotocol.o(.text)
 <LI><a href="#[4d]">CAN_COM_thread(const void*)</a> from bushandler.o(.text) referenced 2 times from processingloops.o(.text)
 <LI><a href="#[269]">start_ADC_Conversion()</a> from adc_4088.o(.text) referenced 2 times from adc_4088.o(.text)
 <LI><a href="#[5d]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[36e]">Standard_UART_Interrupt()</a> from uart_rtos_interrupt.o(.text) referenced 2 times from uart_rtos_interrupt.o(.text)
 <LI><a href="#[5c]">__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[2f2]">list(const char*, bool)</a> from file_ops.o(.text) referenced from file_ops.o(.text)
 <LI><a href="#[295]">time(const void*)</a> from processingloops.o(.text) referenced 2 times from processingloops.o(.text)
 <LI><a href="#[51]">mydmairq()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.text)
 <LI><a href="#[50]">mymciirq()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.text)
 <LI><a href="#[5f]">FATDirHandle::readdir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[62]">FATDirHandle::seekdir(long)</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[61]">FATDirHandle::telldir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[5e]">FATDirHandle::closedir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[60]">FATDirHandle::rewinddir()</a> from fatdirhandle.o(.text) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[64]">FATDirHandle::~FATDirHandle__deallocating()</a> from fatdirhandle.o(i._ZN12FATDirHandleD0Ev) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[63]">FATDirHandle::~FATDirHandle()</a> from fatdirhandle.o(i._ZN12FATDirHandleD1Ev) referenced from fatdirhandle.o(.constdata__ZTV12FATDirHandle)
 <LI><a href="#[6b]">FATFileHandle::flen()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[67]">FATFileHandle::read(void*, unsigned)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[66]">FATFileHandle::close()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[6a]">FATFileHandle::fsync()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[69]">FATFileHandle::lseek(long, int)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[65]">FATFileHandle::write(const void*, unsigned)</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[68]">FATFileHandle::isatty()</a> from fatfilehandle.o(.text) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[6d]">FATFileHandle::~FATFileHandle__deallocating()</a> from fatfilehandle.o(i._ZN13FATFileHandleD0Ev) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[6c]">FATFileHandle::~FATFileHandle()</a> from fatfilehandle.o(i._ZN13FATFileHandleD1Ev) referenced from fatfilehandle.o(.constdata__ZTV13FATFileHandle)
 <LI><a href="#[77]">FATFileSystem::disk_status()</a> from fatfilesystem.o(i._ZN13FATFileSystem11disk_statusEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[76]">FATFileSystem::disk_initialize()</a> from fatfilesystem.o(i._ZN13FATFileSystem15disk_initializeEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[70]">FATFileSystem::open(const char*, int)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[70]">FATFileSystem::open(const char*, int)</a> from fatfilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[74]">FATFileSystem::mkdir(const char*, int)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[74]">FATFileSystem::mkdir(const char*, int)</a> from fatfilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[75]">FATFileSystem::format()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[75]">FATFileSystem::format()</a> from fatfilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[71]">FATFileSystem::remove(const char*)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[71]">FATFileSystem::remove(const char*)</a> from fatfilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[73]">FATFileSystem::opendir(const char*)</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[73]">FATFileSystem::opendir(const char*)</a> from fatfilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[79]">FATFileSystem::disk_sync()</a> from fatfilesystem.o(i._ZN13FATFileSystem9disk_syncEv) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[6f]">FATFileSystem::~FATFileSystem__deallocating()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[6e]">FATFileSystem::~FATFileSystem__sub_object()</a> from fatfilesystem.o(.text) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[7e]">MCIFileSystem::disk_write(const unsigned char*, unsigned long long)</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[7c]">MCIFileSystem::disk_status()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[80]">MCIFileSystem::disk_sectors()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[7b]">MCIFileSystem::disk_initialize()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[7d]">MCIFileSystem::disk_read(unsigned char*, unsigned long long)</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[7f]">MCIFileSystem::disk_sync()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[7a]">MCIFileSystem::~MCIFileSystem__deallocating()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[46]">MCIFileSystem::~MCIFileSystem()</a> from mcifilesystem.o(.text) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[46]">MCIFileSystem::~MCIFileSystem()</a> from mcifilesystem.o(.text) referenced from main.o(.text)
 <LI><a href="#[4b]">mbed::CANMessage::CANMessage()</a> from busprotocol.o(i._ZN4mbed10CANMessageC1Ev) referenced from busprotocol.o(.text)
 <LI><a href="#[81]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[81]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[83]">mbed::FileHandle::~FileHandle__deallocating()</a> from retarget.o(.text) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[82]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(.text) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[22d]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from serialbase.o(.text) referenced from serialbase.o(.text)
 <LI><a href="#[21f]">mbed::TimerEvent::irq(unsigned)</a> from timerevent.o(.text) referenced from timerevent.o(.text)
 <LI><a href="#[85]">mbed::TimerEvent::~TimerEvent__deallocating()</a> from timerevent.o(.text) referenced from timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[84]">mbed::TimerEvent::~TimerEvent__sub_object()</a> from timerevent.o(.text) referenced from timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[87]">mbed::BaseDirHandle::readdir()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandle7readdirEv) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[8a]">mbed::BaseDirHandle::seekdir(long)</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandle7seekdirEl) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[89]">mbed::BaseDirHandle::telldir()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandle7telldirEv) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[86]">mbed::BaseDirHandle::closedir()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandle8closedirEv) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[88]">mbed::BaseDirHandle::rewinddir()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandle9rewinddirEv) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[8c]">mbed::BaseDirHandle::~BaseDirHandle__deallocating()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandleD0Ev) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[8b]">mbed::BaseDirHandle::~BaseDirHandle()</a> from filesystemlike.o(i._ZN4mbed13BaseDirHandleD1Ev) referenced from filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
 <LI><a href="#[91]">mbed::FileSystemLike::mkdir(const char*, int)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike5mkdirEPKci) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[8f]">mbed::FileSystemLike::remove(const char*)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike6removeEPKc) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[72]">mbed::FileSystemLike::rename(const char*, const char*)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike6renameEPKcS2_) referenced from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[72]">mbed::FileSystemLike::rename(const char*, const char*)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike6renameEPKcS2_) referenced from mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
 <LI><a href="#[72]">mbed::FileSystemLike::rename(const char*, const char*)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike6renameEPKcS2_) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[90]">mbed::FileSystemLike::opendir(const char*)</a> from filesystemlike.o(i._ZN4mbed14FileSystemLike7opendirEPKc) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[8e]">mbed::FileSystemLike::~FileSystemLike__deallocating()</a> from filesystemlike.o(.text) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[8d]">mbed::FileSystemLike::~FileSystemLike__sub_object()</a> from filesystemlike.o(.text) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[20b]">mbed::CAN::_irq_handler(unsigned, CanIrqType)</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[92]">mbed::CAN::~CAN__deallocating()</a> from can.o(.text) referenced from can.o(.constdata__ZTVN4mbed3CANE)
 <LI><a href="#[4a]">mbed::CAN::~CAN()</a> from can.o(.text) referenced from can.o(.constdata__ZTVN4mbed3CANE)
 <LI><a href="#[4a]">mbed::CAN::~CAN()</a> from can.o(.text) referenced from busprotocol.o(.text)
 <LI><a href="#[93]">mbed::Serial::_getc()</a> from serial.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[94]">mbed::Serial::_putc(int)</a> from serial.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[47]">mbed::Serial::~Serial()</a> from main.o(i._ZN4mbed6SerialD1Ev) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[47]">mbed::Serial::~Serial()</a> from main.o(i._ZN4mbed6SerialD1Ev) referenced 2 times from main.o(.text)
 <LI><a href="#[9b]">mbed::Stream::flen()</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9b]">mbed::Stream::flen()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[97]">mbed::Stream::read(void*, unsigned)</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[97]">mbed::Stream::read(void*, unsigned)</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[96]">mbed::Stream::close()</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[96]">mbed::Stream::close()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9a]">mbed::Stream::fsync()</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9a]">mbed::Stream::fsync()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[99]">mbed::Stream::lseek(long, int)</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[99]">mbed::Stream::lseek(long, int)</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[95]">mbed::Stream::write(const void*, unsigned)</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[95]">mbed::Stream::write(const void*, unsigned)</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[98]">mbed::Stream::isatty()</a> from stream.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[98]">mbed::Stream::isatty()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9f]">mbed::Stream::~Stream__deallocating()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[9e]">mbed::Stream::~Stream__sub_object()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a2]">mbed::Ticker::handler()</a> from ticker.o(.text) referenced from ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[4c]">mbed::Ticker::~Ticker()</a> from ticker.o(i._ZN4mbed6TickerD1Ev) referenced from ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[4c]">mbed::Ticker::~Ticker()</a> from ticker.o(i._ZN4mbed6TickerD1Ev) referenced from adc_4088.o(.text)
 <LI><a href="#[a4]">mbed::FileBase::~FileBase__deallocating()</a> from filebase.o(.text) referenced from filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[a3]">mbed::FileBase::~FileBase()</a> from filebase.o(.text) referenced from filebase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[a6]">mbed::FileLike::~FileLike__deallocating()</a> from filelike.o(.text) referenced from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[a5]">mbed::FileLike::~FileLike__sub_object()</a> from filelike.o(.text) referenced from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[aa]">mbed::DirHandle::seekdir(long)</a> from filesystemlike.o(i._ZN4mbed9DirHandle7seekdirEl) referenced from filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[a9]">mbed::DirHandle::telldir()</a> from filesystemlike.o(i._ZN4mbed9DirHandle7telldirEv) referenced from filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[ac]">rtos::Thread::~Thread__deallocating()</a> from thread.o(.text) referenced from thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[ab]">rtos::Thread::~Thread()</a> from thread.o(.text) referenced from thread.o(.constdata__ZTVN4rtos6ThreadE)
 <LI><a href="#[a1]">thunk{-4} to mbed::Stream::~Stream__deallocating()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a0]">thunk{-4} to mbed::Stream::~Stream()</a> from stream.o(.text) referenced from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[a8]">thunk{-4} to mbed::FileLike::~FileLike__deallocating()</a> from filelike.o(.text) referenced from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[a7]">thunk{-4} to mbed::FileLike::~FileLike()</a> from filelike.o(.text) referenced from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[9d]">thunk{-72} to mbed::Serial::_getc()</a> from serial.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[9c]">thunk{-72} to mbed::Serial::_putc(int)</a> from serial.o(.text) referenced from serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[5b]">___backspace$unlocked</a> from backspace.o(.text) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from fatfilesystem.o(.constdata__ZTV13FATFileSystem)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from filelike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[78]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 3 times from filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
 <LI><a href="#[b4]">__main</a> from __main.o(!!!main) referenced from startup_lpc407x_8x_177x_8x.o(.text)
 <LI><a href="#[b0]">__sti___12_ADC_4088_cpp_ticker</a> from adc_4088.o(.text) referenced from adc_4088.o(.init_array)
 <LI><a href="#[b2]">__sti___12_file_ops_cpp_myled1</a> from file_ops.o(.text) referenced from file_ops.o(.init_array)
 <LI><a href="#[af]">__sti___14_BusHandler_cpp_inQueue</a> from bushandler.o(.text) referenced from bushandler.o(.init_array)
 <LI><a href="#[ae]">__sti___15_BusProtocol_cpp_can1</a> from busprotocol.o(.text) referenced from busprotocol.o(.init_array)
 <LI><a href="#[b1]">__sti___19_ProcessingLoops_cpp_outQueue</a> from processingloops.o(.text) referenced from processingloops.o(.init_array)
 <LI><a href="#[b3]">__sti___23_UART_RTOS_Interrupt_cpp_5a0c9b47</a> from uart_rtos_interrupt.o(.text) referenced from uart_rtos_interrupt.o(.init_array)
 <LI><a href="#[ad]">__sti___8_main_cpp_mcifs</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[5a]">_fgetc$unlocked</a> from fgetc.o(i.fgetc) referenced from scanf_char_file_locked.o(.text)
 <LI><a href="#[59]">_fputc$unlocked</a> from fputc.o(i.fputc) referenced from _printf_char_file_locked.o(.text)
 <LI><a href="#[58]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[55]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[54]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[56]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[53]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[52]">_sputc</a> from _sputc.o(.text) referenced 2 times from __2sprintf.o(.text)
 <LI><a href="#[117]">can_irq_n</a> from can_api.o(.text) referenced from can_api.o(.text)
 <LI><a href="#[4e]">isr_nextMeasurement</a> from impact_event.o(.text) referenced from processingloops.o(.text)
 <LI><a href="#[57]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[b]">main</a> from retarget.o(.text) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[181]">osThreadExit</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[a]">osTimerThread</a> from rt_cmsis.o(.text) referenced 2 times from rtx_conf_cm.o(.data)
 <LI><a href="#[43]">os_idle_demon</a> from rtx_conf_cm.o(.text) referenced from rt_task.o(.text)
 <LI><a href="#[40]">rt_alloc_box</a> from rt_membox.o(.text) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[41]">rt_free_box</a> from rt_membox.o(.text) referenced from hal_cm4.o(.emb_text)
 <LI><a href="#[45]">rt_mut_release</a> from rt_mutex.o(.text) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[44]">rt_mut_wait</a> from rt_mutex.o(.text) referenced from rtx_conf_cm.o(.text)
 <LI><a href="#[4f]">rt_tsk_delete</a> from rt_task.o(.text) referenced from cmd.o(.text)
 <LI><a href="#[191]">svcDelay</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[17a]">svcKernelInitialize</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[188]">svcKernelRunning</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[184]">svcKernelStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1d5]">svcMailCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[182]">svcMessageCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1a3]">svcMessageGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1d2]">svcMessagePut</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1b2]">svcMutexCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1b6]">svcMutexDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1b5]">svcMutexRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1b4]">svcMutexWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1c9]">svcPoolCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1bc]">svcSemaphoreCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1c2]">svcSemaphoreDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1c0]">svcSemaphoreRelease</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1be]">svcSemaphoreWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1a8]">svcSignalClear</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1aa]">svcSignalGet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1a6]">svcSignalSet</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1ab]">svcSignalWait</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[17f]">svcThreadCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[17b]">svcThreadGetId</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[18b]">svcThreadGetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[18a]">svcThreadSetPriority</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[17d]">svcThreadTerminate</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[189]">svcThreadYield</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[19c]">svcTimerCall</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[195]">svcTimerCreate</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[19b]">svcTimerDelete</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[196]">svcTimerStart</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[19a]">svcTimerStop</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1d6]">sysMailAlloc</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[1d7]">sysMailFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[1cb]">sysPoolAlloc</a> from rt_cmsis.o(.text) referenced 2 times from rt_cmsis.o(.text)
 <LI><a href="#[1cd]">sysPoolFree</a> from rt_cmsis.o(.text) referenced from rt_cmsis.o(.text)
 <LI><a href="#[12b]">uart0_irq</a> from serial_api.o(.text) referenced from serial_api.o(.text)
 <LI><a href="#[12d]">uart1_irq</a> from serial_api.o(.text) referenced from serial_api.o(.text)
 <LI><a href="#[12e]">uart2_irq</a> from serial_api.o(.text) referenced from serial_api.o(.text)
 <LI><a href="#[12f]">uart3_irq</a> from serial_api.o(.text) referenced from serial_api.o(.text)
 <LI><a href="#[130]">uart4_irq</a> from serial_api.o(.text) referenced from serial_api.o(.text)
 <LI><a href="#[42]">us_ticker_irq_handler</a> from us_ticker_api.o(.text) referenced from us_ticker.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[bc]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[be]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[408]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[409]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[40a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[40b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[40c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bf]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[381]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[c1]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[c3]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c5]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c6]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[40d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[c9]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cb]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cc]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[cd]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[cf]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d1]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d4]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d5]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[d7]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[40e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[d9]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[db]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[dd]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[df]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[40f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[f2]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[e3]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[410]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[e5]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_common &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[411]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[412]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[413]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[e7]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[414]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[415]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[e8]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[416]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[ea]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[417]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[418]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[419]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[41a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[41b]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[41c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[41d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[41e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[41f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[420]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[421]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[422]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[ef]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_1 &rArr; __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[bd]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rtx_conf_cm.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_main_stack
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[423]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[424]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>MCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SSP2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc407x_8x_177x_8x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>exit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_input_queue
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact
</UL>

<P><STRONG><a name="[f9]"></a>error</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, error.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_ProcessingLoops_cpp_outQueue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_BusHandler_cpp_inQueue
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[425]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[15f]"></a>rt_get_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[428]"></a>os_set_env</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[167]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calloc_box
</UL>

<P><STRONG><a name="[429]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)

<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>OS_Tick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_cm4.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_irqack
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[11c]"></a>NVIC_SetVector</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, cmsis_nvic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_set
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_ADC_interrupt
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[42a]"></a>NVIC_GetVector</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_nvic.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 696 bytes, Stack size 12 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[102]"></a>fpu_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fpu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3e]"></a>SystemInit</STRONG> (Thumb, 224 bytes, Stack size 4 bytes, system_lpc407x_8x_177x_8x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; fpu_init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpu_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(.text)
</UL>
<P><STRONG><a name="[104]"></a>analogin_init</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, analogin_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = analogin_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
</UL>

<P><STRONG><a name="[10b]"></a>analogin_read_u16</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, analogin_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_u32
</UL>

<P><STRONG><a name="[10c]"></a>analogin_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, analogin_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_u32
</UL>

<P><STRONG><a name="[10d]"></a>gpio_set</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = gpio_set &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[10f]"></a>gpio_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, gpio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = gpio_init &rArr; gpio_set &rArr; pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[110]"></a>gpio_mode</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
</UL>

<P><STRONG><a name="[112]"></a>gpio_dir</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gpio_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = gpio_dir &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[14e]"></a>rtc_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtc_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[42b]"></a>rtc_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtc_api.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>rtc_isenabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rtc_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[113]"></a>rtc_read</STRONG> (Thumb, 70 bytes, Stack size 56 bytes, rtc_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>

<P><STRONG><a name="[115]"></a>rtc_write</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtc_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rtc_write &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>

<P><STRONG><a name="[217]"></a>can_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::mode(mbed::CAN::Mode)
</UL>

<P><STRONG><a name="[219]"></a>can_filter</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, can_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::filter(unsigned, unsigned, CANFormat, int)
</UL>

<P><STRONG><a name="[117]"></a>can_irq_n</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = can_irq_n &rArr; can_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_api.o(.text)
</UL>
<P><STRONG><a name="[20f]"></a>can_irq_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_irq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName)
</UL>

<P><STRONG><a name="[119]"></a>can_irq_free</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_irq_free
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
</UL>

<P><STRONG><a name="[11b]"></a>can_irq_set</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = can_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(void(*)(), mbed::CAN::IrqType)
</UL>

<P><STRONG><a name="[11d]"></a>can_frequency</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = can_frequency &rArr; can_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_speed
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::frequency(int)
</UL>

<P><STRONG><a name="[120]"></a>can_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = can_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::reset()
</UL>

<P><STRONG><a name="[121]"></a>can_init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = can_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName)
</UL>

<P><STRONG><a name="[210]"></a>can_free</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, can_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
</UL>

<P><STRONG><a name="[123]"></a>can_write</STRONG> (Thumb, 380 bytes, Stack size 56 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = can_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::write(mbed::CANMessage)
</UL>

<P><STRONG><a name="[126]"></a>can_read</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_read &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::read(mbed::CANMessage&, int)
</UL>

<P><STRONG><a name="[21b]"></a>can_rderror</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, can_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::rderror()
</UL>

<P><STRONG><a name="[21d]"></a>can_tderror</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, can_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::tderror()
</UL>

<P><STRONG><a name="[127]"></a>can_monitor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, can_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_enable
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::monitor(bool)
</UL>

<P><STRONG><a name="[128]"></a>serial_format</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = serial_format &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)
</UL>

<P><STRONG><a name="[12a]"></a>serial_baud</STRONG> (Thumb, 320 bytes, Stack size 36 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[129]"></a>serial_init</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>

<P><STRONG><a name="[42c]"></a>serial_free</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_api.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>uart0_irq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart0_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text)
</UL>
<P><STRONG><a name="[12d]"></a>uart1_irq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart1_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>uart2_irq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart2_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>uart3_irq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart3_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text)
</UL>
<P><STRONG><a name="[130]"></a>uart4_irq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart4_irq &rArr; uart_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial_api.o(.text)
</UL>
<P><STRONG><a name="[22e]"></a>serial_irq_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[131]"></a>serial_irq_set</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, serial_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>

<P><STRONG><a name="[133]"></a>serial_readable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[132]"></a>serial_getc</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[135]"></a>serial_writable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, serial_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::writeable()
</UL>

<P><STRONG><a name="[134]"></a>serial_putc</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[42d]"></a>serial_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, serial_api.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>serial_pinout_tx</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[22b]"></a>serial_break_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::send_break()
</UL>

<P><STRONG><a name="[22c]"></a>serial_break_clear</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::send_break()
</UL>

<P><STRONG><a name="[10e]"></a>pin_function</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pinmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = pin_function &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[111]"></a>pin_mode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, pinmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
</UL>

<P><STRONG><a name="[137]"></a>us_ticker_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, us_ticker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>

<P><STRONG><a name="[138]"></a>us_ticker_read</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, us_ticker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_sync()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WaitForEvent() const
</UL>

<P><STRONG><a name="[142]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, us_ticker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>

<P><STRONG><a name="[141]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, us_ticker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>

<P><STRONG><a name="[140]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, us_ticker.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[139]"></a>wait_us</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wait_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::send_break()
</UL>

<P><STRONG><a name="[13a]"></a>wait</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wait_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleError(const char*)
</UL>

<P><STRONG><a name="[13b]"></a>wait_ms</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wait_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wait_ms &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[f8]"></a>mbed_die</STRONG> (Thumb, 116 bytes, Stack size 96 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>

<P><STRONG><a name="[107]"></a>pinmap_pinout</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, pinmap_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_pinout_tx
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_ADC_interrupt
</UL>

<P><STRONG><a name="[122]"></a>pinmap_merge</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pinmap_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pinmap_merge &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[13e]"></a>pinmap_find_peripheral</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pinmap_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[105]"></a>pinmap_peripheral</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pinmap_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = pinmap_peripheral &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_ADC_interrupt
</UL>

<P><STRONG><a name="[13f]"></a>us_ticker_set_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = us_ticker_set_handler &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[42]"></a>us_ticker_irq_handler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, us_ticker_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(.text)
</UL>
<P><STRONG><a name="[143]"></a>us_ticker_insert_event</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, us_ticker_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>

<P><STRONG><a name="[144]"></a>us_ticker_remove_event</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, us_ticker_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[106]"></a>mbed_assert_internal</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::cardInserted() const
</UL>

<P><STRONG><a name="[149]"></a>gpio_init_in_ex</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[14a]"></a>gpio_init_in</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
</UL>

<P><STRONG><a name="[14b]"></a>gpio_init_out_ex</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[13d]"></a>gpio_init_out</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>

<P><STRONG><a name="[14c]"></a>gpio_init_inout</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>

<P><STRONG><a name="[14d]"></a>set_time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtc_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_time &rArr; rtc_write &rArr; localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10min()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10day()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10min()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10day()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_sec()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_mnt()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_min()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_day()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_sec()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_mnt()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_min()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_day()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_yr()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_hr()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_yr()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_hr()
</UL>

<P><STRONG><a name="[14f]"></a>time</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = time &rArr; rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_isenabled
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_time()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_date()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10min()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10day()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10min()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10day()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_sec()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_mnt()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_min()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_day()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_sec()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_mnt()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_min()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_day()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_yr()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_hr()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_yr()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_hr()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock()
</UL>

<P><STRONG><a name="[151]"></a>clock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rtc_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[180]"></a>rt_get_TID</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
</UL>

<P><STRONG><a name="[fc]"></a>__user_perthread_libspace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[152]"></a>rt_init_context</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[156]"></a>rt_switch_req</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[154]"></a>rt_dispatch</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[159]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_itv_wait
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[15b]"></a>rt_tsk_pass</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_same_rdy_prio
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadYield
</UL>

<P><STRONG><a name="[17c]"></a>rt_tsk_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetId
</UL>

<P><STRONG><a name="[15d]"></a>rt_tsk_prio</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[4f]"></a>rt_tsk_delete</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = rt_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_PSP
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(.text)
</UL>
<P><STRONG><a name="[162]"></a>rt_sys_init</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_sys_init &rArr; rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[164]"></a>rt_sys_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, rt_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_sys_start
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>

<P><STRONG><a name="[1ca]"></a>_init_box</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, rt_membox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
</UL>

<P><STRONG><a name="[40]"></a>rt_alloc_box</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[166]"></a>_calloc_box</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, rt_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_alloc_box
</UL>

<P><STRONG><a name="[41]"></a>rt_free_box</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, rt_membox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm4.o(.emb_text)
</UL>
<P><STRONG><a name="[163]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[168]"></a>rt_chk_robin</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rt_robin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_chk_robin &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[183]"></a>rt_mbx_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
</UL>

<P><STRONG><a name="[169]"></a>rt_mbx_send</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mbx_send &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
</UL>

<P><STRONG><a name="[16b]"></a>rt_mbx_wait</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mbx_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
</UL>

<P><STRONG><a name="[19e]"></a>rt_mbx_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_mailbox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[16d]"></a>isr_mbx_send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>

<P><STRONG><a name="[170]"></a>isr_mbx_receive</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[171]"></a>rt_mbx_psh</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, rt_mailbox.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[173]"></a>rt_tsk_lock</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_suspend
</UL>

<P><STRONG><a name="[172]"></a>rt_suspend</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_lock
</UL>

<P><STRONG><a name="[176]"></a>rt_tsk_unlock</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[174]"></a>rt_resume</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_unlock
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[16f]"></a>rt_psh_req</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[fe]"></a>rt_pop_req</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = rt_pop_req &rArr; rt_mbx_psh &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[165]"></a>os_tick_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rt_system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
</UL>

<P><STRONG><a name="[101]"></a>os_tick_irqack</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_system.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
</UL>

<P><STRONG><a name="[ff]"></a>rt_systick</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = rt_systick &rArr; sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Handler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fd]"></a>rt_stk_check</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rt_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[17a]"></a>svcKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = svcKernelInitialize &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[17b]"></a>svcThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[17d]"></a>svcThreadTerminate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = svcThreadTerminate &rArr; rt_tsk_delete &rArr; rt_stk_check &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[181]"></a>osThreadExit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[17f]"></a>svcThreadCreate</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_TID
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[182]"></a>svcMessageCreate</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = svcMessageCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[184]"></a>svcKernelStart</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = svcKernelStart &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[188]"></a>svcKernelRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>osKernelInitialize</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; svcKernelInitialize &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f5]"></a>osKernelStart</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelStart
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[187]"></a>osKernelRunning</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[189]"></a>svcThreadYield</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = svcThreadYield &rArr; rt_tsk_pass &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>svcThreadSetPriority</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcThreadSetPriority &rArr; rt_tsk_prio &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[18b]"></a>svcThreadGetPriority</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcThreadGetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>osThreadCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[18c]"></a>osThreadGetId</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::gettid()
</UL>

<P><STRONG><a name="[18d]"></a>osThreadTerminate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[18e]"></a>osThreadYield</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::yield()
</UL>

<P><STRONG><a name="[18f]"></a>osThreadSetPriority</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::set_priority(osPriority)
</UL>

<P><STRONG><a name="[190]"></a>osThreadGetPriority</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::get_priority()
</UL>

<P><STRONG><a name="[191]"></a>svcDelay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcDelay &rArr; rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[194]"></a>osDelay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::wait(unsigned)
</UL>

<P><STRONG><a name="[42e]"></a>osWait</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)

<P><STRONG><a name="[195]"></a>svcTimerCreate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = svcTimerCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[196]"></a>svcTimerStart</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = svcTimerStart &rArr; rt_timer_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[19a]"></a>svcTimerStop</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerStop &rArr; rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[19b]"></a>svcTimerDelete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerDelete &rArr; rt_timer_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_remove
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[19c]"></a>svcTimerCall</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = svcTimerCall
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[179]"></a>sysTimerTick</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = sysTimerTick &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[19f]"></a>osTimerCreate</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = osTimerCreate &rArr; svcTimerCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*)
</UL>

<P><STRONG><a name="[1a0]"></a>osTimerStart</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::start(unsigned)
</UL>

<P><STRONG><a name="[1a1]"></a>osTimerStop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::stop()
</UL>

<P><STRONG><a name="[1a2]"></a>osTimerDelete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::~RtosTimer()
</UL>

<P><STRONG><a name="[1a5]"></a>osTimerCall</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerCall
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
</UL>

<P><STRONG><a name="[1a3]"></a>svcMessageGet</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcMessageGet &rArr; rt_mbx_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1a4]"></a>osMessageGet</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailGet
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerThread
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)50&rang;::get(unsigned)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned)
</UL>

<P><STRONG><a name="[a]"></a>osTimerThread</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = osTimerThread &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[1a6]"></a>svcSignalSet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcSignalSet &rArr; rt_evt_set &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>svcSignalClear</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = svcSignalClear &rArr; rt_evt_clr
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_clr
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1aa]"></a>svcSignalGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = svcSignalGet
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1ab]"></a>svcSignalWait</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcSignalWait &rArr; rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_wait
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>osSignalSet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tid2ptcb
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::signal_set(int)
</UL>

<P><STRONG><a name="[1af]"></a>osSignalClear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1b0]"></a>osSignalGet</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1b1]"></a>osSignalWait</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::signal_wait(int, unsigned)
</UL>

<P><STRONG><a name="[1b2]"></a>svcMutexCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = svcMutexCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1b4]"></a>svcMutexWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcMutexWait &rArr; rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1b5]"></a>svcMutexRelease</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcMutexRelease &rArr; rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1b6]"></a>svcMutexDelete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcMutexDelete &rArr; rt_mut_delete &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1b8]"></a>osMutexCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[1b9]"></a>osMutexWait</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1ba]"></a>osMutexRelease</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1bb]"></a>osMutexDelete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1bc]"></a>svcSemaphoreCreate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = svcSemaphoreCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1be]"></a>svcSemaphoreWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcSemaphoreWait &rArr; rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1c0]"></a>svcSemaphoreRelease</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSemaphoreRelease &rArr; rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1c2]"></a>svcSemaphoreDelete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = svcSemaphoreDelete &rArr; rt_sem_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1c4]"></a>osSemaphoreCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[1c5]"></a>osSemaphoreWait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1c6]"></a>osSemaphoreRelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_id2obj
</UL>

<P><STRONG><a name="[1c8]"></a>osSemaphoreDelete</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1c9]"></a>svcPoolCreate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = svcPoolCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>sysPoolAlloc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sysPoolAlloc &rArr; rt_clr_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1cd]"></a>sysPoolFree</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1ce]"></a>osPoolCreate</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = osPoolCreate &rArr; svcPoolCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_ProcessingLoops_cpp_outQueue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_BusHandler_cpp_inQueue
</UL>

<P><STRONG><a name="[1cf]"></a>osPoolAlloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osPoolAlloc &rArr; sysPoolAlloc &rArr; rt_clr_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::alloc()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[1d0]"></a>osPoolCAlloc</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[1d1]"></a>osPoolFree</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osPoolFree &rArr; sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)50&rang;::free(CANmessage_t*)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::free(CANmessage_t*)
</UL>

<P><STRONG><a name="[1d2]"></a>svcMessagePut</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcMessagePut &rArr; rt_mbx_send &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1d3]"></a>osMessageCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = osMessageCreate &rArr; svcMessageCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_ProcessingLoops_cpp_outQueue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_BusHandler_cpp_inQueue
</UL>

<P><STRONG><a name="[1d4]"></a>osMessagePut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailPut
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[1d5]"></a>svcMailCreate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = svcMailCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysThreadError
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1d6]"></a>sysMailAlloc</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sysMailAlloc &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_clr_box
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ms2tick
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1d7]"></a>sysMailFree</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = sysMailFree &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_cmsis.o(.text)
</UL>
<P><STRONG><a name="[1d8]"></a>osMailCreate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_CONTROL
</UL>

<P><STRONG><a name="[1d9]"></a>osMailAlloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1da]"></a>osMailCAlloc</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1db]"></a>osMailFree</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
</UL>

<P><STRONG><a name="[1dc]"></a>osMailPut</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[1dd]"></a>osMailGet</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rt_cmsis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[1ac]"></a>rt_evt_wait</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_evt_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
</UL>

<P><STRONG><a name="[1a7]"></a>rt_evt_set</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_set &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
</UL>

<P><STRONG><a name="[1a9]"></a>rt_evt_clr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_evt_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
</UL>

<P><STRONG><a name="[1ae]"></a>isr_evt_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rt_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[42f]"></a>rt_evt_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_event.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>rt_evt_psh</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_evt_psh &rArr; rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[1bd]"></a>rt_sem_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_semaphore.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
</UL>

<P><STRONG><a name="[1c3]"></a>rt_sem_delete</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreDelete
</UL>

<P><STRONG><a name="[1c1]"></a>rt_sem_send</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_sem_send &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
</UL>

<P><STRONG><a name="[1bf]"></a>rt_sem_wait</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_sem_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
</UL>

<P><STRONG><a name="[1c7]"></a>isr_sem_send</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rt_semaphore.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psh_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[178]"></a>rt_sem_psh</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rt_semaphore.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_sem_psh &rArr; rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[43]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(.text)
</UL>
<P><STRONG><a name="[b6]"></a>os_error</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_psq_enq
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>

<P><STRONG><a name="[b7]"></a>sysThreadError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMailCreate
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcPoolCreate
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCreate
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageCreate
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadCreate
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcKernelInitialize
</UL>

<P><STRONG><a name="[b8]"></a>_mutex_initialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = _mutex_initialize &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[b9]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[ba]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>

<P><STRONG><a name="[b5]"></a>set_main_stack</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtx_conf_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[430]"></a>rt_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>rt_dly_wait</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rt_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[431]"></a>rt_itv_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rt_time.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>rt_itv_wait</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rt_time.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[1b3]"></a>rt_mut_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rt_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexCreate
</UL>

<P><STRONG><a name="[1b7]"></a>rt_mut_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_delete &rArr; rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
</UL>

<P><STRONG><a name="[45]"></a>rt_mut_release</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>rt_mut_wait</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rt_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.text)
</UL>
<P><STRONG><a name="[158]"></a>rt_put_prio</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_wait
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[155]"></a>rt_get_first</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[157]"></a>rt_put_rdy_first</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[15c]"></a>rt_get_same_rdy_prio</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_pass
</UL>

<P><STRONG><a name="[160]"></a>rt_rmv_list</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[15e]"></a>rt_resort_prio</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_prio
</UL>

<P><STRONG><a name="[15a]"></a>rt_put_dly</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[175]"></a>rt_dec_dly</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_dec_dly &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resume
</UL>

<P><STRONG><a name="[161]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
</UL>

<P><STRONG><a name="[16e]"></a>rt_psq_enq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, rt_list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_sem_send
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_evt_set
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_receive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
</UL>

<P><STRONG><a name="[153]"></a>rt_init_stack</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[16c]"></a>rt_ret_val</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_ret_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_send
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_delete
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailFree
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_wait
</UL>

<P><STRONG><a name="[16a]"></a>rt_ret_val2</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hal_cm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_ret_val2
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_set
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_send
</UL>

<P><STRONG><a name="[1e0]"></a>$Super$$main</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; sensor_loop(const void*) &rArr; processSettings(CANmessage_t*) &rArr; set_threshold &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = BusFault_Handler &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = UsageFault_Handler &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = MemManage_Handler &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc407x_8x_177x_8x.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>__user_setup_stackheap</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__reserved_stack_size
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1ec]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[432]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, stream.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to mbed::Stream::~Stream()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__deallocating()
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[9f]"></a>mbed::Stream::~Stream__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::~Stream__deallocating() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to mbed::Stream::~Stream__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a1]"></a>thunk{-4} to mbed::Stream::~Stream__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = thunk{-4} to mbed::Stream::~Stream__deallocating() &rArr; mbed::Stream::~Stream__deallocating() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[a0]"></a>thunk{-4} to mbed::Stream::~Stream()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = thunk{-4} to mbed::Stream::~Stream() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[1f3]"></a>mbed::Stream::putc(int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RTOS_putc(char)
</UL>

<P><STRONG><a name="[1f5]"></a>mbed::Stream::puts(const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>

<P><STRONG><a name="[1f7]"></a>mbed::Stream::getc()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[1f9]"></a>mbed::Stream::gets(char*, int)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>

<P><STRONG><a name="[1e4]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMsgId(msgType_t, char, char, unsigned)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RTOS_printf(char*)
</UL>

<P><STRONG><a name="[1fc]"></a>mbed::Stream::scanf(const char*, ...)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, stream.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL>

<P><STRONG><a name="[96]"></a>mbed::Stream::close()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[95]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[97]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stream.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[99]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[98]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9a]"></a>mbed::Stream::fsync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9b]"></a>mbed::Stream::flen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stream.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1ff]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, functionpointer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(void(*)(), mbed::CAN::IrqType)
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(void(*)(), unsigned long long)
</UL>

<P><STRONG><a name="[1fe]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, functionpointer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ADC_4088_cpp_ticker
</UL>

<P><STRONG><a name="[433]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, functionpointer.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, functionpointer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FunctionPointer::call()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::_irq_handler(unsigned, CanIrqType)
</UL>

<P><STRONG><a name="[200]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, filepath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[434]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, filepath.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filepath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[202]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, filepath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[204]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, filepath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[205]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, filepath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[206]"></a>mbed::FilePath::file()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, filepath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[233]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, filepath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[207]"></a>mbed::FileSystemLike::FileSystemLike__sub_object(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, filesystemlike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
</UL>

<P><STRONG><a name="[435]"></a>mbed::FileSystemLike::~FileSystemLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, filesystemlike.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>mbed::FileSystemLike::~FileSystemLike__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, filesystemlike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileSystemLike::~FileSystemLike__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__deallocating()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[8e]"></a>mbed::FileSystemLike::~FileSystemLike__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, filesystemlike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FileSystemLike::~FileSystemLike__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[209]"></a>mbed::FileSystemLike::opendir()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, filesystemlike.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
</UL>

<P><STRONG><a name="[20b]"></a>mbed::CAN::_irq_handler(unsigned, CanIrqType)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::CAN::_irq_handler(unsigned, CanIrqType) &rArr; mbed::FunctionPointer::call()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[20d]"></a>mbed::CAN::CAN(PinName, PinName)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = mbed::CAN::CAN(PinName, PinName) &rArr; can_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BusProtocol_cpp_can1
</UL>

<P><STRONG><a name="[436]"></a>mbed::CAN::CAN__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[4a]"></a>mbed::CAN::~CAN()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CAN::~CAN() &rArr; can_irq_free
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_free
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_free
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> can.o(.constdata__ZTVN4mbed3CANE)
<LI> busprotocol.o(.text)
</UL>
<P><STRONG><a name="[437]"></a>mbed::CAN::~CAN__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, can.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>mbed::CAN::~CAN__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::CAN::~CAN__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.constdata__ZTVN4mbed3CANE)
</UL>
<P><STRONG><a name="[211]"></a>mbed::CAN::frequency(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::CAN::frequency(int) &rArr; can_frequency &rArr; can_speed
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
</UL>

<P><STRONG><a name="[212]"></a>mbed::CAN::write(mbed::CANMessage)</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::CAN::write(mbed::CANMessage) &rArr; can_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage(mbed::CANMessage)
</UL>

<P><STRONG><a name="[213]"></a>mbed::CAN::read(mbed::CANMessage&, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::CAN::read(mbed::CANMessage&, int) &rArr; can_read &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIRQHandler()
</UL>

<P><STRONG><a name="[214]"></a>mbed::CAN::reset()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CAN::reset() &rArr; can_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
</UL>

<P><STRONG><a name="[215]"></a>mbed::CAN::monitor(bool)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_monitor
</UL>

<P><STRONG><a name="[216]"></a>mbed::CAN::mode(mbed::CAN::Mode)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CAN::mode(mbed::CAN::Mode)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
</UL>

<P><STRONG><a name="[218]"></a>mbed::CAN::filter(unsigned, unsigned, CANFormat, int)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_filter
</UL>

<P><STRONG><a name="[21a]"></a>mbed::CAN::rderror()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_rderror
</UL>

<P><STRONG><a name="[21c]"></a>mbed::CAN::tderror()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_tderror
</UL>

<P><STRONG><a name="[21e]"></a>mbed::CAN::attach(void(*)(), mbed::CAN::IrqType)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::CAN::attach(void(*)(), mbed::CAN::IrqType) &rArr; can_irq_set &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_set
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
</UL>

<P><STRONG><a name="[21f]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::irq(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.text)
</UL>
<P><STRONG><a name="[220]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ADC_4088_cpp_ticker
</UL>

<P><STRONG><a name="[221]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
</UL>

<P><STRONG><a name="[438]"></a>mbed::TimerEvent::~TimerEvent()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, timerevent.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>mbed::TimerEvent::~TimerEvent__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimerEvent::~TimerEvent__sub_object() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[85]"></a>mbed::TimerEvent::~TimerEvent__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::TimerEvent::~TimerEvent__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[222]"></a>mbed::TimerEvent::insert(unsigned long long)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, timerevent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
</UL>

<P><STRONG><a name="[1ea]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___23_UART_RTOS_Interrupt_cpp_5a0c9b47
</UL>

<P><STRONG><a name="[439]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, serial.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>mbed::Serial::_getc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9d]"></a>thunk{-72} to mbed::Serial::_getc()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = thunk{-72} to mbed::Serial::_getc() &rArr; mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[94]"></a>mbed::Serial::_putc(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[9c]"></a>thunk{-72} to mbed::Serial::_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = thunk{-72} to mbed::Serial::_putc(int) &rArr; mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[1e1]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CHOSEN_UART(int)
</UL>

<P><STRONG><a name="[226]"></a>mbed::SerialBase::format(int, mbed::SerialBase::Parity, int)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, serialbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_format
</UL>

<P><STRONG><a name="[227]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Standard_UART_Interrupt()
</UL>

<P><STRONG><a name="[228]"></a>mbed::SerialBase::writeable()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serialbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>

<P><STRONG><a name="[229]"></a>mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serialbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_set
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CHOSEN_UART(int)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RTOS_getc()
</UL>

<P><STRONG><a name="[22a]"></a>mbed::SerialBase::send_break()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serialbase.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_break_clear
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_break_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_us
</UL>

<P><STRONG><a name="[22d]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq) &rArr; mbed::FunctionPointer::call()
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text)
</UL>
<P><STRONG><a name="[223]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[43a]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, serialbase.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::SerialBase::_base_getc() &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[225]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::SerialBase::_base_putc(int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[230]"></a>_sys_open</STRONG> (Thumb, 284 bytes, Stack size 48 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[38f]"></a>_sys_close</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[235]"></a>_sys_write</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[236]"></a>_sys_read</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_serial()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[388]"></a>_sys_istty</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[3b8]"></a>_sys_seek</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[43b]"></a>_sys_ensure</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>_sys_flen</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[237]"></a>remove</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[238]"></a>rename</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[43c]"></a>tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>tmpfile</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>_sys_command_string</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>opendir</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
</UL>

<P><STRONG><a name="[2e9]"></a>readdir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
</UL>

<P><STRONG><a name="[2ea]"></a>closedir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
</UL>

<P><STRONG><a name="[43f]"></a>rewinddir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[440]"></a>telldir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>seekdir</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>mkdir</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[23c]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; sensor_loop(const void*) &rArr; processSettings(CANmessage_t*) &rArr; set_threshold &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_conf_cm.o(.data)
</UL>
<P><STRONG><a name="[442]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__deallocating()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[83]"></a>mbed::FileHandle::~FileHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FileHandle::~FileHandle__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[23d]"></a>mbed::Ticker::detach()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ticker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::~Ticker()
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC_Conversion()
</UL>

<P><STRONG><a name="[23e]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ticker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(void(*)(), unsigned long long)
</UL>

<P><STRONG><a name="[a2]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ticker.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[1ed]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, filelike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[443]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, filelike.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, filelike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to mbed::FileLike::~FileLike()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[a6]"></a>mbed::FileLike::~FileLike__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, filelike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FileLike::~FileLike__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-4} to mbed::FileLike::~FileLike__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[a8]"></a>thunk{-4} to mbed::FileLike::~FileLike__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, filelike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = thunk{-4} to mbed::FileLike::~FileLike__deallocating() &rArr; mbed::FileLike::~FileLike__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[a7]"></a>thunk{-4} to mbed::FileLike::~FileLike()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, filelike.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thunk{-4} to mbed::FileLike::~FileLike() &rArr; mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[208]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, filebase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[444]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, filebase.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, filebase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__sub_object()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[445]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, filebase.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>mbed::FileBase::~FileBase__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, filebase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::FileBase::~FileBase__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filebase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[3f1]"></a>mbed::FileBase::getName()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filebase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
</UL>

<P><STRONG><a name="[203]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filebase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>

<P><STRONG><a name="[201]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, filebase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[3f0]"></a>mbed::FileBase::get(int)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, filebase.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
</UL>

<P><STRONG><a name="[241]"></a>rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rtostimer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*) &rArr; osTimerCreate &rArr; svcTimerCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[446]"></a>rtos::RtosTimer::RtosTimer__sub_object(void(*)(const void*), os_timer_type, void*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rtostimer.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>rtos::RtosTimer::stop()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtostimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[243]"></a>rtos::RtosTimer::start(unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtostimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[244]"></a>rtos::RtosTimer::~RtosTimer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtostimer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
</UL>

<P><STRONG><a name="[447]"></a>rtos::RtosTimer::~RtosTimer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rtostimer.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*) &rArr; osThreadCreate &rArr; svcThreadCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[448]"></a>rtos::Thread::Thread__sub_object(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtos::Thread::terminate() &rArr; osThreadTerminate
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[248]"></a>rtos::Thread::set_priority(osPriority)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
</UL>

<P><STRONG><a name="[249]"></a>rtos::Thread::get_priority()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
</UL>

<P><STRONG><a name="[24a]"></a>rtos::Thread::signal_set(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
</UL>

<P><STRONG><a name="[449]"></a>rtos::Thread::get_state()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>rtos::Thread::signal_wait(int, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
</UL>

<P><STRONG><a name="[24c]"></a>rtos::Thread::wait(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[24d]"></a>rtos::Thread::yield()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
</UL>

<P><STRONG><a name="[24e]"></a>rtos::Thread::gettid()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>

<P><STRONG><a name="[ab]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtos::Thread::~Thread() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[44a]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, thread.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>rtos::Thread::~Thread__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Thread::~Thread__deallocating() &rArr; rtos::Thread::~Thread() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.constdata__ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[250]"></a>storeRecMessages(mbed::CANMessage)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = storeRecMessages(mbed::CANMessage) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIRQHandler()
</UL>

<P><STRONG><a name="[251]"></a>CANIRQHandler()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CANIRQHandler() &rArr; mbed::CAN::read(mbed::CANMessage&, int) &rArr; can_read &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::read(mbed::CANMessage&, int)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeRecMessages(mbed::CANMessage)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busprotocol.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>CAN_init()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = CAN_init() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::attach(void(*)(), mbed::CAN::IrqType)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::mode(mbed::CAN::Mode)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::reset()
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::frequency(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_CAN_Bus(deviceType_t)
</UL>

<P><STRONG><a name="[253]"></a>dequeueOutput()</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dequeueOutput() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CANMessage::CANMessage()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[254]"></a>sendMessage(mbed::CANMessage)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sendMessage(mbed::CANMessage) &rArr; mbed::CAN::write(mbed::CANMessage) &rArr; can_write &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::write(mbed::CANMessage)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[256]"></a>setExtGrpCANFilter(unsigned, unsigned)</STRONG> (Thumb, 290 bytes, Stack size 28 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setExtGrpCANFilter(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSensorFilter(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableBroadCastFilter()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_CAN_Bus(deviceType_t)
</UL>

<P><STRONG><a name="[255]"></a>start_CAN_Bus(deviceType_t)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = start_CAN_Bus(deviceType_t) &rArr; CAN_init() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExtGrpCANFilter(unsigned, unsigned)
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[25a]"></a>setTokenStatus(char, char, unsigned long long)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setTokenStatus(char, char, unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[257]"></a>prepareMsgId(msgType_t, char, char, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = prepareMsgId(msgType_t, char, char, unsigned) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[4d]"></a>CAN_COM_thread(const void*)</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = CAN_COM_thread(const void*) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned) &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::free(CANmessage_t*)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepareMsgId(msgType_t, char, char, unsigned)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTokenStatus(char, char, unsigned long long)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMessage(mbed::CANMessage)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeueOutput()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processingloops.o(.text)
</UL>
<P><STRONG><a name="[25c]"></a>enqueueMessage(unsigned, char*, char, char, msgType_t)</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned)
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::alloc()
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sensor_raw(unsigned long long, sensor_config)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTimestamp()
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSensor(unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAllSensors()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSettings(unsigned short, SensorConfigMsg_t)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSerialResponse(unsigned)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t)
</UL>

<P><STRONG><a name="[25f]"></a>enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t)</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
</UL>

<P><STRONG><a name="[260]"></a>sendSerialResponse(unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = sendSerialResponse(unsigned) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[261]"></a>enableBroadCastFilter()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = enableBroadCastFilter() &rArr; setExtGrpCANFilter(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExtGrpCANFilter(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[262]"></a>enableSensorFilter(unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = enableSensorFilter(unsigned char) &rArr; setExtGrpCANFilter(unsigned, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setExtGrpCANFilter(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[263]"></a>sendSettings(unsigned short, SensorConfigMsg_t)</STRONG> (Thumb, 398 bytes, Stack size 48 bytes, bushandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sensor_raw(unsigned long long, sensor_config)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
</UL>

<P><STRONG><a name="[264]"></a>stopAllSensors()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bushandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sensor_raw(unsigned long long, sensor_config)
</UL>

<P><STRONG><a name="[265]"></a>stopSensor(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bushandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>

<P><STRONG><a name="[266]"></a>emptyQueue()</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = emptyQueue() &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned) &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned)
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::free(CANmessage_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[267]"></a>resetTimestamp()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bushandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_timestamp()
</UL>

<P><STRONG><a name="[268]"></a>start_sensor_raw(unsigned long long, sensor_config)</STRONG> (Thumb, 132 bytes, Stack size 56 bytes, bushandler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopAllSensors()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSettings(unsigned short, SensorConfigMsg_t)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_detail_mode_raw(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[296]"></a>getSerialNumber()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, serialid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSerialNumber()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[269]"></a>start_ADC_Conversion()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc_4088.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = start_ADC_Conversion() &rArr; mbed::Ticker::attach_us(void(*)(), unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(void(*)(), unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_4088.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>register_ADC_interrupt</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, adc_4088.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = register_ADC_interrupt &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_pinout
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::attach_us(void(*)(), unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[44b]"></a>stop_ADC_Conversion</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, adc_4088.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>get_ADC_result</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc_4088.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>set_ADC_frequency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc_4088.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
</UL>

<P><STRONG><a name="[26c]"></a>init_impact</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = init_impact &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_impact_length
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_action_handler
</UL>

<P><STRONG><a name="[26e]"></a>init_impact_action_handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = init_impact_action_handler &rArr; init_impact &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_event_handler
</UL>

<P><STRONG><a name="[26f]"></a>free_impact</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, impact_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_impact_length
</UL>

<P><STRONG><a name="[284]"></a>new_impact</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = new_impact
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[289]"></a>end_impact</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, impact_action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[271]"></a>add_sample</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = add_sample &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[285]"></a>update_maxima_pos</STRONG> (Thumb, 106 bytes, Stack size 12 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_maxima_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[286]"></a>update_maxima_neg</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = update_maxima_neg
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[287]"></a>end_peak</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, impact_action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[288]"></a>start_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, impact_action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[283]"></a>stop_timer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, impact_action.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[272]"></a>store_impact</STRONG> (Thumb, 1122 bytes, Stack size 48 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>

<P><STRONG><a name="[273]"></a>store_raw</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, impact_action.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = store_raw &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_event_detection
</UL>

<P><STRONG><a name="[274]"></a>enqueue_impact_input</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = enqueue_impact_input
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_nextMeasurement
</UL>

<P><STRONG><a name="[4e]"></a>isr_nextMeasurement</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_nextMeasurement &rArr; enqueue_impact_input
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_impact_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processingloops.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>dequeue_impact_input</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dequeue_impact_input
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_event_detection
</UL>

<P><STRONG><a name="[278]"></a>impact_event_detection</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = impact_event_detection &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_impact_input
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[27a]"></a>init_impact_input_queue</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = init_impact_input_queue &rArr; exit &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_input_queue_length
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_event_handler
</UL>

<P><STRONG><a name="[27b]"></a>init_impact_event_handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = init_impact_event_handler &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_input_queue
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_action_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[27d]"></a>free_impact_input_queue</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, impact_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_input_queue_length
</UL>

<P><STRONG><a name="[27e]"></a>reset_timestamp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reset_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ(IRQn)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[27f]"></a>set_baseline</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = set_baseline &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
</UL>

<P><STRONG><a name="[280]"></a>set_threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, impact_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = set_threshold &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
</UL>

<P><STRONG><a name="[281]"></a>set_max_impact_length</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, impact_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_impact
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact
</UL>

<P><STRONG><a name="[282]"></a>set_input_queue_length</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, impact_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_impact_input_queue
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_input_queue
</UL>

<P><STRONG><a name="[294]"></a>set_samples_until_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, impact_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
</UL>

<P><STRONG><a name="[292]"></a>setDetailMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, impact_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
</UL>

<P><STRONG><a name="[44d]"></a>startRaw</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, impact_event.o(.text), UNUSED)

<P><STRONG><a name="[279]"></a>impact_fsm</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, impact_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_timer
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timer
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_peak
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_maxima_neg
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_maxima_pos
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sample
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_impact
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_impact
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_fsm
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_event_detection
</UL>

<P><STRONG><a name="[27c]"></a>init_impact_fsm</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, impact_fsm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_input_queue_length
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_max_impact_length
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_threshold
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baseline
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_event_handler
</UL>

<P><STRONG><a name="[28a]"></a>adjust_timing()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = adjust_timing() &rArr; calibration()
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
</UL>

<P><STRONG><a name="[1e2]"></a>sdram_init()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_timing()
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinConfig()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmddly()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fbclkdly()
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend
</UL>

<P><STRONG><a name="[290]"></a>__rt_heap_extend</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
</UL>

<P><STRONG><a name="[1eb]"></a>__reserved_stack_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44e]"></a>sdram_disableMallocSdram()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdram.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>time(const void*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, processingloops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time(const void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processingloops.o(.text)
</UL>
<P><STRONG><a name="[291]"></a>processSettings(CANmessage_t*)</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, processingloops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = processSettings(CANmessage_t*) &rArr; set_threshold &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setDetailMode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_samples_until_timeout
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_threshold
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_baseline
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ADC_frequency
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
</UL>

<P><STRONG><a name="[1e5]"></a>sensor_loop(const void*)</STRONG> (Thumb, 1258 bytes, Stack size 232 bytes, processingloops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = sensor_loop(const void*) &rArr; processSettings(CANmessage_t*) &rArr; set_threshold &rArr; init_impact_fsm &rArr; impact_fsm &rArr; store_impact &rArr; enqueueMessage(unsigned, ImpStd_t, char, char, msgType_t) &rArr; enqueueMessage(unsigned, char*, char, char, msgType_t) &rArr; rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)50&rang;::get(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)50&rang;::free(CANmessage_t*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timestamp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_event_handler
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;impact_event_detection
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_ADC_interrupt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNumber()
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyQueue()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSensorFilter(unsigned char)
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableBroadCastFilter()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSerialResponse(unsigned)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTokenStatus(char, char, unsigned long long)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_CAN_Bus(deviceType_t)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[299]"></a>logger_loop(const void*)</STRONG> (Thumb, 1568 bytes, Stack size 256 bytes, processingloops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Queue&lang;CANmessage_t, (unsigned)50&rang;::get(unsigned)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::MemoryPool&lang;CANmessage_t, (unsigned)50&rang;::free(CANmessage_t*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_config_file()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sensor(unsigned, sensor_config*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount_sd()
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTimestamp()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSettings(unsigned short, SensorConfigMsg_t)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTokenStatus(char, char, unsigned long long)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_CAN_Bus(deviceType_t)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::start(unsigned)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::stop()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*)
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[29e]"></a>get_cmd_event_thread(const void*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, processingloops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Setup_CHOSEN_UART(int)
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RTOS_getc()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_menu_fsm()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[44f]"></a>init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmd.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>init_menu_fsm()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_basemenu()
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
</UL>

<P><STRONG><a name="[2a3]"></a>menu_fsm(unsigned)</STRONG> (Thumb, 2064 bytes, Stack size 8 bytes, cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_config_file()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount_sd()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_time()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_date()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_baseline()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_timeout()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_get_nr()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_detail()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_thres()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10min()
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_10day()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10min()
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_10day()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_start_stop()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_raw()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_sec()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_mnt()
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_min()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_day()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_sec()
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_mnt()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_min()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_day()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_fs()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_yr()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_inc_hr()
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_yr()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_internal_clock_dec_hr()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_reset_timestamp()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_detail_mode_raw(unsigned char, unsigned)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print_logger_status()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_id_is_valid(unsigned char)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_state()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_logger_start()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_store_config_file()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_sampling_freq(unsigned char, unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_config_file()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_unmount_sd()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_list_files()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_detail_mode(unsigned char, unsigned char)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_timestamp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_format_sd()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_basemenu()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_threshold(unsigned char, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_start_logger()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_baseline(unsigned char, unsigned)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_start(unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_logger()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_timeout(unsigned char, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_stop(unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unmount_sd()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format_sd()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
</UL>

<P><STRONG><a name="[2a4]"></a>cmd_enter_basemenu()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_menu_fsm()
</UL>

<P><STRONG><a name="[2a5]"></a>cmd_enter_list_files()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveList(const char*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d9]"></a>cmd_enter_delete_file()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2a6]"></a>cmd_enter_format_sd()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2af]"></a>cmd_format_sd()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::format()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[29a]"></a>cmd_mount_sd()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::cardInserted() const
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[2a7]"></a>cmd_enter_unmount_sd()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2db]"></a>cmd_close_sensor_file(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_logger()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_stop(unsigned char)
</UL>

<P><STRONG><a name="[2b1]"></a>cmd_stop_logger()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_close_sensor_file(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unmount_sd()
</UL>

<P><STRONG><a name="[2b0]"></a>cmd_unmount_sd()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_stop_logger()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2a8]"></a>cmd_print_logger_status()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2a9]"></a>cmd_enter_logger_start()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2dd]"></a>cmd_open_sensor_file(unsigned char)</STRONG> (Thumb, 1226 bytes, Stack size 56 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_start_logger()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_start(unsigned char)
</UL>

<P><STRONG><a name="[2b2]"></a>cmd_start_logger()</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b4]"></a>cmd_enter_sensor_params()</STRONG> (Thumb, 306 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2df]"></a>cmd_list_sensor_states()</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_get_nr()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_state()
</UL>

<P><STRONG><a name="[2aa]"></a>cmd_enter_sensor_params_get_nr()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list_sensor_states()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b3]"></a>cmd_sensor_id_is_valid(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b5]"></a>cmd_enter_sensor_params_fs()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2e0]"></a>cmd_send_config_to_sensor(unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSettings(unsigned short, SensorConfigMsg_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_sampling_freq(unsigned char, unsigned)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_detail_mode(unsigned char, unsigned char)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_threshold(unsigned char, unsigned)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_baseline(unsigned char, unsigned)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_start(unsigned char)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_timeout(unsigned char, unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_stop(unsigned char)
</UL>

<P><STRONG><a name="[2bb]"></a>cmd_set_sampling_freq(unsigned char, unsigned)</STRONG> (Thumb, 1002 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b6]"></a>cmd_enter_sensor_params_thres()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2bc]"></a>cmd_set_threshold(unsigned char, unsigned)</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b7]"></a>cmd_enter_sensor_params_baseline()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2bd]"></a>cmd_set_baseline(unsigned char, unsigned)</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b8]"></a>cmd_enter_sensor_params_timeout()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2be]"></a>cmd_set_timeout(unsigned char, unsigned)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2b9]"></a>cmd_enter_sensor_params_detail()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c0]"></a>cmd_enter_sensor_params_raw()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2bf]"></a>cmd_set_detail_mode(unsigned char, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c1]"></a>cmd_set_detail_mode_raw(unsigned char, unsigned)</STRONG> (Thumb, 936 bytes, Stack size 64 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_sensor_raw(unsigned long long, sensor_config)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ba]"></a>cmd_enter_sensor_start_stop()</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c2]"></a>cmd_sensor_start(unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c3]"></a>cmd_sensor_stop(unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_send_config_to_sensor(unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_close_sensor_file(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ab]"></a>cmd_enter_sensor_state()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list_sensor_states()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ac]"></a>cmd_enter_reset_timestamp()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c4]"></a>cmd_reset_timestamp()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetTimestamp()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ad]"></a>cmd_enter_internal_clock()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c5]"></a>cmd_enter_internal_clock_set_date()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c6]"></a>cmd_enter_internal_clock_set_time()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c7]"></a>cmd_internal_clock_inc_yr()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c8]"></a>cmd_internal_clock_dec_yr()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2c9]"></a>cmd_internal_clock_inc_mnt()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ca]"></a>cmd_internal_clock_dec_mnt()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2cb]"></a>cmd_internal_clock_inc_10day()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2cc]"></a>cmd_internal_clock_dec_10day()</STRONG> (Thumb, 894 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2cd]"></a>cmd_internal_clock_inc_day()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ce]"></a>cmd_internal_clock_dec_day()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2cf]"></a>cmd_internal_clock_inc_hr()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d0]"></a>cmd_internal_clock_dec_hr()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d1]"></a>cmd_internal_clock_inc_10min()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d2]"></a>cmd_internal_clock_dec_10min()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d3]"></a>cmd_internal_clock_inc_min()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d4]"></a>cmd_internal_clock_dec_min()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d5]"></a>cmd_internal_clock_inc_sec()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d6]"></a>cmd_internal_clock_dec_sec()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2ae]"></a>cmd_enter_config_file()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[2d7]"></a>cmd_store_config_file()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_to_file(std::__FILE*, sensor_config*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
</UL>

<P><STRONG><a name="[29b]"></a>cmd_read_config_file()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd_action.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[2e4]"></a>ledShowProgress()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
</UL>

<P><STRONG><a name="[2e6]"></a>handleError(const char*)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2e7]"></a>recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveList(const char*)
</UL>

<P><STRONG><a name="[2eb]"></a>fileLen(std::__FILE*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, file_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fileLen(std::__FILE*) &rArr; fseek &rArr; _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(const char*, bool)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
</UL>

<P><STRONG><a name="[2ee]"></a>copyFH(std::__FILE*, std::__FILE*)</STRONG> (Thumb, 110 bytes, Stack size 544 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fileLen(std::__FILE*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledShowProgress()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(const char*, const char*)
</UL>

<P><STRONG><a name="[2f1]"></a>copy(const char*, const char*)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>

<P><STRONG><a name="[2f2]"></a>list(const char*, bool)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, file_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = list(const char*, bool) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fileLen(std::__FILE*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_ops.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>recursiveList(const char*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_list_files()
</UL>

<P><STRONG><a name="[2f3]"></a>testAppend(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, file_ops.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>

<P><STRONG><a name="[2f6]"></a>sensor_config_init(sensor_config*, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_default(sensor_config*, unsigned char)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sensor_config_array(sensor_config*)
</UL>

<P><STRONG><a name="[2f5]"></a>init_sensor_config_array(sensor_config*)</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_init(sensor_config*, unsigned char)
</UL>

<P><STRONG><a name="[2f7]"></a>sensor_config_default(sensor_config*, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_init(sensor_config*, unsigned char)
</UL>

<P><STRONG><a name="[2f8]"></a>sensor_config_to_str(sensor_config*, char*)</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_to_file(std::__FILE*, sensor_config*)
</UL>

<P><STRONG><a name="[2f9]"></a>sensor_config_from_file(std::__FILE*, sensor_config*)</STRONG> (Thumb, 356 bytes, Stack size 128 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
</UL>

<P><STRONG><a name="[2e3]"></a>sensor_config_read_file(std::__FILE*, sensor_config*)</STRONG> (Thumb, 178 bytes, Stack size 88 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_from_file(std::__FILE*, sensor_config*)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_config_file()
</UL>

<P><STRONG><a name="[2e2]"></a>sensor_config_to_file(std::__FILE*, sensor_config*)</STRONG> (Thumb, 86 bytes, Stack size 104 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_to_str(sensor_config*, char*)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_store_config_file()
</UL>

<P><STRONG><a name="[450]"></a>init_logger_config(logger_config)</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, sensor_config.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>register_sensor(unsigned, sensor_config*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[29d]"></a>store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)</STRONG> (Thumb, 1196 bytes, Stack size 10408 bytes, sensor_config.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[2fd]"></a>MCIFileSystem::mci_ReadFIFO(unsigned*, bool) const</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MCIFileSystem::mci_ReadFIFO(unsigned*, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[2fc]"></a>MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[2fb]"></a>MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)</STRONG> (Thumb, 132 bytes, Stack size 28 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadFIFO(unsigned*, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)
</UL>

<P><STRONG><a name="[2fe]"></a>MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_MCIIRQHandler()
</UL>

<P><STRONG><a name="[2ff]"></a>MCIFileSystem::mci_MCIIRQHandler()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MCIFileSystem::mci_MCIIRQHandler() &rArr; MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymciirq()
</UL>

<P><STRONG><a name="[300]"></a>MCIFileSystem::mci_DMAIRQHandler()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCIFileSystem::mci_DMAIRQHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_interrupt(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mydmairq()
</UL>

<P><STRONG><a name="[302]"></a>MCIFileSystem::mci_WriteDelay() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetDataTransfer(unsigned short, bool, unsigned) const
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCommand(unsigned, unsigned) const
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ResetCommand() const
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetClock(unsigned) const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ClockControl(MCIFileSystem::ClockControl, bool) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_PowerControl(MCIFileSystem::power_ctrl_t, unsigned) const
</UL>

<P><STRONG><a name="[303]"></a>MCIFileSystem::mci_PowerControl(MCIFileSystem::power_ctrl_t, unsigned) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCIFileSystem::mci_PowerControl(MCIFileSystem::power_ctrl_t, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[304]"></a>MCIFileSystem::mci_ClockControl(MCIFileSystem::ClockControl, bool) const</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCIFileSystem::mci_ClockControl(MCIFileSystem::ClockControl, bool) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCardParams() const
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[305]"></a>MCIFileSystem::mci_SetClock(unsigned) const</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCIFileSystem::mci_SetClock(unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCardParams() const
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[306]"></a>MCIFileSystem::initMCI()</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MCIFileSystem::initMCI() &rArr; MCIFileSystem::mci_SetClock(unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVector
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_init()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetClock(unsigned) const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ClockControl(MCIFileSystem::ClockControl, bool) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_PowerControl(MCIFileSystem::power_ctrl_t, unsigned) const
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
</UL>

<P><STRONG><a name="[1e6]"></a>MCIFileSystem::MCIFileSystem(const char*, PinName)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::MCIFileSystem(const char*, PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
</UL>

<P><STRONG><a name="[451]"></a>MCIFileSystem::MCIFileSystem__sub_object(const char*, PinName)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, mcifilesystem.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>MCIFileSystem::~MCIFileSystem()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MCIFileSystem::~MCIFileSystem() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::~MCIFileSystem__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[452]"></a>MCIFileSystem::~MCIFileSystem__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, mcifilesystem.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>MCIFileSystem::~MCIFileSystem__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MCIFileSystem::~MCIFileSystem__deallocating() &rArr; MCIFileSystem::~MCIFileSystem() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::~MCIFileSystem()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[310]"></a>MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_writeBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_readBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_StopTransmission(unsigned) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetAddr(unsigned short) const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SelectCard(unsigned short) const
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppCmd(unsigned short) const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBlockLength(unsigned, unsigned) const
</UL>

<P><STRONG><a name="[30e]"></a>MCIFileSystem::mci_GetResp(MCIFileSystem::response_t*) const</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mcifilesystem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>

<P><STRONG><a name="[30a]"></a>MCIFileSystem::mci_ResetCommand() const</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MCIFileSystem::mci_ResetCommand() const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[30b]"></a>MCIFileSystem::mci_SetCommand(unsigned, unsigned) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const
</UL>

<P><STRONG><a name="[30c]"></a>MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCommand(unsigned, unsigned) const
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ResetCommand() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>

<P><STRONG><a name="[30d]"></a>MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetResp(MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_writeBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_readBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_StopTransmission(unsigned) const
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendIfCond() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppOpCond(unsigned short, bool, unsigned*, bool*) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendOpCond(unsigned*) const
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCID(unsigned*) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetAddr(unsigned short*) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetAddr(unsigned short) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCSD(unsigned short, unsigned*) const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SelectCard(unsigned short) const
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppCmd(unsigned short) const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBlockLength(unsigned, unsigned) const
</UL>

<P><STRONG><a name="[30f]"></a>MCIFileSystem::mci_SetBlockLength(unsigned, unsigned) const</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MCIFileSystem::mci_SetBlockLength(unsigned, unsigned) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCardParams() const
</UL>

<P><STRONG><a name="[311]"></a>MCIFileSystem::mci_SendAppCmd(unsigned short) const</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppOpCond(unsigned short, bool, unsigned*, bool*) const
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const
</UL>

<P><STRONG><a name="[312]"></a>MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const &rArr; MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppCmd(unsigned short) const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCardParams() const
</UL>

<P><STRONG><a name="[313]"></a>MCIFileSystem::mci_SetCardParams() const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MCIFileSystem::mci_SetCardParams() const &rArr; MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const &rArr; MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetBlockLength(unsigned, unsigned) const
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetClock(unsigned) const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ClockControl(MCIFileSystem::ClockControl, bool) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[314]"></a>MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardStatus() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_StopTransmission(unsigned) const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetTranState(unsigned short) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardState() const
</UL>

<P><STRONG><a name="[315]"></a>MCIFileSystem::mci_GetCardState() const</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MCIFileSystem::mci_GetCardState() const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[316]"></a>MCIFileSystem::mci_SelectCard(unsigned short) const</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_SelectCard(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetTranState(unsigned short) const
</UL>

<P><STRONG><a name="[317]"></a>MCIFileSystem::mci_SetTranState(unsigned short) const</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MCIFileSystem::mci_SetTranState(unsigned short) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SelectCard(unsigned short) const
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[319]"></a>MCIFileSystem::mci_GetBits(int, int, unsigned*) const</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MCIFileSystem::mci_GetBits(int, int, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ProcessCSD()
</UL>

<P><STRONG><a name="[318]"></a>MCIFileSystem::mci_ProcessCSD()</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MCIFileSystem::mci_ProcessCSD() &rArr; MCIFileSystem::mci_GetBits(int, int, unsigned*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetBits(int, int, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31a]"></a>MCIFileSystem::mci_GetCSD(unsigned short, unsigned*) const</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MCIFileSystem::mci_GetCSD(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31b]"></a>MCIFileSystem::mci_SetAddr(unsigned short) const</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_SetAddr(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31c]"></a>MCIFileSystem::mci_GetAddr(unsigned short*) const</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_GetAddr(unsigned short*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31d]"></a>MCIFileSystem::mci_GetCID(unsigned*) const</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_GetCID(unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31e]"></a>MCIFileSystem::mci_SendOpCond(unsigned*) const</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_SendOpCond(unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[31f]"></a>MCIFileSystem::mci_SendAppOpCond(unsigned short, bool, unsigned*, bool*) const</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MCIFileSystem::mci_SendAppOpCond(unsigned short, bool, unsigned*, bool*) const &rArr; MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppCmd(unsigned short) const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[320]"></a>MCIFileSystem::mci_SendIfCond() const</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MCIFileSystem::mci_SendIfCond() const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
</UL>

<P><STRONG><a name="[321]"></a>MCIFileSystem::mci_Acquire()</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MCIFileSystem::mci_Acquire() &rArr; MCIFileSystem::mci_SetCardParams() const &rArr; MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const &rArr; MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendIfCond() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendAppOpCond(unsigned short, bool, unsigned*, bool*) const
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SendOpCond(unsigned*) const
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCID(unsigned*) const
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetAddr(unsigned short*) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetAddr(unsigned short) const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCSD(unsigned short, unsigned*) const
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ProcessCSD()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetTranState(unsigned short) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardState() const
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetCardParams() const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetClock(unsigned) const
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_PowerControl(MCIFileSystem::power_ctrl_t, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[2da]"></a>MCIFileSystem::cardInserted() const</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::cardInserted() const &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount_sd()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[7b]"></a>MCIFileSystem::disk_initialize()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_initialize() &rArr; MCIFileSystem::mci_Acquire() &rArr; MCIFileSystem::mci_SetCardParams() const &rArr; MCIFileSystem::mci_SetBusWidth(unsigned short, unsigned char) const &rArr; MCIFileSystem::mci_SendAppCmd(unsigned short) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_Acquire()
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::cardInserted() const
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format_sd()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[7c]"></a>MCIFileSystem::disk_status()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_status() &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[323]"></a>MCIFileSystem::mci_StopTransmission(unsigned) const</STRONG> (Thumb, 354 bytes, Stack size 48 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MCIFileSystem::mci_StopTransmission(unsigned) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[324]"></a>MCIFileSystem::mci_WaitForEvent() const</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MCIFileSystem::mci_WaitForEvent() const &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[325]"></a>MCIFileSystem::_readBlocks(unsigned, unsigned, unsigned) const</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MCIFileSystem::_readBlocks(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[326]"></a>MCIFileSystem::mci_SetDataTransfer(unsigned short, bool, unsigned) const</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MCIFileSystem::mci_SetDataTransfer(unsigned short, bool, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteDelay() const
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[327]"></a>MCIFileSystem::mci_SetupEventWakeup(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCIFileSystem::mci_SetupEventWakeup(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ(IRQn)
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[328]"></a>MCIFileSystem::mci_ReadBlocks(void*, int, int)</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MCIFileSystem::mci_ReadBlocks(void*, int, int) &rArr; MCIFileSystem::mci_StopTransmission(unsigned) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer_from_mci(unsigned char, unsigned, unsigned)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_getFreeChannel(unsigned char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_stop(unsigned char)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetupEventWakeup(unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetDataTransfer(unsigned short, bool, unsigned) const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_readBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WaitForEvent() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_StopTransmission(unsigned) const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetTranState(unsigned short) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardState() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_read(unsigned char*, unsigned long long)
</UL>

<P><STRONG><a name="[7d]"></a>MCIFileSystem::disk_read(unsigned char*, unsigned long long)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_read(unsigned char*, unsigned long long) &rArr; MCIFileSystem::mci_ReadBlocks(void*, int, int) &rArr; MCIFileSystem::mci_StopTransmission(unsigned) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[32c]"></a>MCIFileSystem::_writeBlocks(unsigned, unsigned, unsigned) const</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = MCIFileSystem::_writeBlocks(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_CheckR1Response(unsigned, MCIFileSystem::ReturnCode*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[32d]"></a>MCIFileSystem::mci_WriteBlocks(void*, int, int)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MCIFileSystem::mci_WriteBlocks(void*, int, int) &rArr; MCIFileSystem::mci_StopTransmission(unsigned) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer_to_mci(unsigned char, unsigned, unsigned)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_getFreeChannel(unsigned char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_stop(unsigned char)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::_writeBlocks(unsigned, unsigned, unsigned) const
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetupEventWakeup(unsigned char)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetDataTransfer(unsigned short, bool, unsigned) const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WaitForEvent() const
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_StopTransmission(unsigned) const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetTranState(unsigned short) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardState() const
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_write(const unsigned char*, unsigned long long)
</UL>

<P><STRONG><a name="[7e]"></a>MCIFileSystem::disk_write(const unsigned char*, unsigned long long)</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_write(const unsigned char*, unsigned long long) &rArr; MCIFileSystem::mci_WriteBlocks(void*, int, int) &rArr; MCIFileSystem::mci_StopTransmission(unsigned) const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[32f]"></a>MCIFileSystem::mci_GetCardStatus() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = MCIFileSystem::mci_GetCardStatus() const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_sync()
</UL>

<P><STRONG><a name="[7f]"></a>MCIFileSystem::disk_sync()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_sync() &rArr; MCIFileSystem::mci_GetCardStatus() const &rArr; MCIFileSystem::mci_GetStatus(unsigned short, unsigned*) const &rArr; MCIFileSystem::mci_ExecuteCmd(unsigned, unsigned, MCIFileSystem::response_t*) const &rArr; MCIFileSystem::mci_SendCmd(unsigned, unsigned, unsigned) const &rArr; MCIFileSystem::mci_SetCommand(unsigned, unsigned) const &rArr; MCIFileSystem::mci_WriteDelay() const &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_GetCardStatus() const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[80]"></a>MCIFileSystem::disk_sectors()</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MCIFileSystem::disk_sectors() &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[330]"></a>FATDirHandle::FATDirHandle(const FATFS_DIR&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FATDirHandle::FATDirHandle(const FATFS_DIR&) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
</UL>

<P><STRONG><a name="[453]"></a>FATDirHandle::FATDirHandle__sub_object(const FATFS_DIR&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fatdirhandle.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>FATDirHandle::closedir()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATDirHandle::closedir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[5f]"></a>FATDirHandle::readdir()</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, fatdirhandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = FATDirHandle::readdir() &rArr; f_readdir &rArr; dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[60]"></a>FATDirHandle::rewinddir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[61]"></a>FATDirHandle::telldir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[62]"></a>FATDirHandle::seekdir(long)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatdirhandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[333]"></a>FATFileHandle::FATFileHandle(FIL)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FATFileHandle::FATFileHandle(FIL) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[454]"></a>FATFileHandle::FATFileHandle__sub_object(FIL)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fatfilehandle.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>FATFileHandle::close()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::close() &rArr; f_close &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[65]"></a>FATFileHandle::write(const void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::write(const void*, unsigned) &rArr; f_write &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[67]"></a>FATFileHandle::read(void*, unsigned)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::read(void*, unsigned) &rArr; f_read &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[68]"></a>FATFileHandle::isatty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilehandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[69]"></a>FATFileHandle::lseek(long, int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::lseek(long, int) &rArr; f_lseek &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[6a]"></a>FATFileHandle::fsync()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = FATFileHandle::fsync() &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[6b]"></a>FATFileHandle::flen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilehandle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[33a]"></a>get_fattime</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = get_fattime &rArr; time &rArr; rtc_read &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[309]"></a>FATFileSystem::FATFileSystem__sub_object(const char*)</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::FATFileSystem__sub_object(const char*) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::FileSystemLike__sub_object(const char*)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
</UL>

<P><STRONG><a name="[455]"></a>FATFileSystem::~FATFileSystem()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fatfilesystem.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>FATFileSystem::~FATFileSystem__sub_object()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FATFileSystem::~FATFileSystem__sub_object() &rArr; mbed::FileSystemLike::~FileSystemLike__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__sub_object()
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::~MCIFileSystem()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[6f]"></a>FATFileSystem::~FATFileSystem__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FATFileSystem::~FATFileSystem__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[70]"></a>FATFileSystem::open(const char*, int)</STRONG> (Thumb, 178 bytes, Stack size 1176 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::open(const char*, int) &rArr; f_open &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::FATFileHandle(FIL)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[71]"></a>FATFileSystem::remove(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::remove(const char*) &rArr; f_unlink &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[75]"></a>FATFileSystem::format()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::format() &rArr; f_mkfs &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format_sd()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[73]"></a>FATFileSystem::opendir(const char*)</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::opendir(const char*) &rArr; f_opendir &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::FATDirHandle(const FATFS_DIR&)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[74]"></a>FATFileSystem::mkdir(const char*, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = FATFileSystem::mkdir(const char*, int) &rArr; f_mkdir &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>
<BR>[Address Reference Count : 2]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[35e]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
</UL>

<P><STRONG><a name="[352]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn(unsigned short*, unsigned char*)
</UL>

<P><STRONG><a name="[342]"></a>disk_initialize(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = disk_initialize(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[343]"></a>disk_status(unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = disk_status(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
</UL>

<P><STRONG><a name="[344]"></a>disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs(FATFS*, unsigned long)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[345]"></a>disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[346]"></a>disk_ioctl(unsigned char, unsigned char, void*)</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = disk_ioctl(unsigned char, unsigned char, void*) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[34f]"></a>clust2sect(FATFS*, unsigned long)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[34a]"></a>get_fat(FATFS*, unsigned long)</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[34b]"></a>put_fat(FATFS*, unsigned long, unsigned long)</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[353]"></a>gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short) &rArr; mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[33b]"></a>f_mount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__sub_object()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
</UL>

<P><STRONG><a name="[33c]"></a>f_open</STRONG> (Thumb, 374 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[336]"></a>f_read</STRONG> (Thumb, 458 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = f_read &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::read(void*, unsigned)
</UL>

<P><STRONG><a name="[335]"></a>f_write</STRONG> (Thumb, 524 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = f_write &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[338]"></a>f_sync</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::fsync()
</UL>

<P><STRONG><a name="[334]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::close()
</UL>

<P><STRONG><a name="[337]"></a>f_lseek</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = f_lseek &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::lseek(long, int)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
</UL>

<P><STRONG><a name="[33f]"></a>f_opendir</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
</UL>

<P><STRONG><a name="[331]"></a>f_readdir</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::readdir()
</UL>

<P><STRONG><a name="[367]"></a>f_stat</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo(FATFS_DIR*, FILINFO*)
</UL>

<P><STRONG><a name="[368]"></a>f_getfree</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[369]"></a>f_truncate</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate(void*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
</UL>

<P><STRONG><a name="[33d]"></a>f_unlink</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::remove(const char*)
</UL>

<P><STRONG><a name="[340]"></a>f_mkdir</STRONG> (Thumb, 364 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain(FATFS*, unsigned long)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::mkdir(const char*, int)
</UL>

<P><STRONG><a name="[36a]"></a>f_chmod</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
</UL>

<P><STRONG><a name="[36b]"></a>f_utime</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
</UL>

<P><STRONG><a name="[36c]"></a>f_rename</STRONG> (Thumb, 280 bytes, Stack size 144 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust(unsigned char*, unsigned long)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>

<P><STRONG><a name="[33e]"></a>f_mkfs</STRONG> (Thumb, 1536 bytes, Stack size 104 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = f_mkfs &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::format()
</UL>

<P><STRONG><a name="[307]"></a>gpdma_init()</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[456]"></a>gpdma_deinit()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpdma.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>gpdma_stop(unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[301]"></a>gpdma_interrupt(unsigned char)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_DMAIRQHandler()
</UL>

<P><STRONG><a name="[329]"></a>gpdma_getFreeChannel(unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gpdma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[32e]"></a>gpdma_transfer_to_mci(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, gpdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpdma_transfer_to_mci(unsigned char, unsigned, unsigned) &rArr; gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_WriteBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[32a]"></a>gpdma_transfer_from_mci(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, gpdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = gpdma_transfer_from_mci(unsigned char, unsigned, unsigned) &rArr; gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_ReadBlocks(void*, int, int)
</UL>

<P><STRONG><a name="[36e]"></a>Standard_UART_Interrupt()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uart_rtos_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Standard_UART_Interrupt() &rArr; mbed::SerialBase::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_rtos_interrupt.o(.text)
</UL>
<P><STRONG><a name="[29f]"></a>Setup_CHOSEN_UART(int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart_rtos_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
</UL>

<P><STRONG><a name="[2a1]"></a>UART_RTOS_getc()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart_rtos_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::attach(void(*)(), mbed::SerialBase::IrqType)
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
</UL>

<P><STRONG><a name="[36f]"></a>UART_RTOS_putc(char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_rtos_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>

<P><STRONG><a name="[370]"></a>UART_RTOS_printf(char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_rtos_interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[457]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>

<P><STRONG><a name="[371]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[26d]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_input_queue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveList(const char*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
</UL>

<P><STRONG><a name="[375]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[270]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_impact_input_queue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_impact
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveList(const char*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[fa]"></a>vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>

<P><STRONG><a name="[1fb]"></a>__c89vfprintf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, c89vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug(const char*, ...)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_if(int, const char*, ...)
</UL>

<P><STRONG><a name="[1e3]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;menu_fsm(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_sensor(unsigned, sensor_config*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_mount_sd()
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;processSettings(CANmessage_t*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact_input_queue
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_raw
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_sample
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_impact
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSettings(unsigned short, SensorConfigMsg_t)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_from_file(std::__FILE*, sensor_config*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(const char*, bool)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleError(const char*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveList(const char*)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_list_sensor_states()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_delete_file()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_time()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_date()
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_baseline()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_timeout()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_get_nr()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_detail()
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_thres()
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_start_stop()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_raw()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params_fs()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_reset_timestamp()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock()
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_print_logger_status()
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_params()
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_sensor_state()
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_logger_start()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_store_config_file()
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_sampling_freq(unsigned char, unsigned)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_config_file()
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_unmount_sd()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_list_files()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_reset_timestamp()
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_format_sd()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_basemenu()
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_threshold(unsigned char, unsigned)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_start_logger()
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_baseline(unsigned char, unsigned)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_sensor_start(unsigned char)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_timeout(unsigned char, unsigned)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_unmount_sd()
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_format_sd()
</UL>

<P><STRONG><a name="[145]"></a>__2fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __2fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testAppend(const char*)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_to_file(std::__FILE*, sensor_config*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[1ee]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_to_str(sensor_config*, char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[379]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[37a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[37b]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[37c]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[378]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ca]"></a>_printf_int_dec</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[37e]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d0]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d8]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[c2]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[37f]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1fd]"></a>vfscanf</STRONG> (Thumb, 16 bytes, Stack size 40 bytes, vfscanf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::scanf(const char*, ...)
</UL>

<P><STRONG><a name="[232]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_from_file(std::__FILE*, sensor_config*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
</UL>

<P><STRONG><a name="[384]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3cf]"></a>_scanf_string</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2a2]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_event_thread(const void*)
</UL>

<P><STRONG><a name="[387]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fseek
</UL>

<P><STRONG><a name="[458]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[389]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftell
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1f0]"></a>setbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setbuf &rArr; setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[45a]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1f8]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fgetc_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[1f4]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fputc_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
</UL>

<P><STRONG><a name="[2ec]"></a>ftell</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ftell_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ftell &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fileLen(std::__FILE*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
</UL>

<P><STRONG><a name="[1f1]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_config_file()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testAppend(const char*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(const char*, bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(const char*, const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_close_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[2ed]"></a>fseek</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fseek_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fseek &rArr; _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fileLen(std::__FILE*)
</UL>

<P><STRONG><a name="[390]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[f7]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::scanf(const char*, ...)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::gets(char*, int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::puts(const char*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::putc(int)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[392]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ef]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_read_config_file()
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;testAppend(const char*)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list(const char*, bool)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy(const char*, const char*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_store_config_file()
</UL>

<P><STRONG><a name="[240]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
</UL>

<P><STRONG><a name="[23f]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[2e8]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursiveProcessFS(char*, const char*, bool(*)(const char*, bool), bool)
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::readdir()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[393]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[45b]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeueOutput()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeRecMessages(mbed::CANMessage)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::FATFileHandle(FIL)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::FATDirHandle(const FATFS_DIR&)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_set_detail_mode_raw(unsigned char, unsigned)
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[45c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[394]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[45f]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___19_ProcessingLoops_cpp_outQueue
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_BusHandler_cpp_inQueue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::RtosTimer::RtosTimer(void(*)(const void*), os_timer_type, void*)
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[460]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2dc]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::readdir()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_close_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[231]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_impact_data(unsigned char, detail_mode, unsigned, ImpactData_t*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[2e1]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_time()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock_set_date()
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_enter_internal_clock()
</UL>

<P><STRONG><a name="[116]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[114]"></a>mktime</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[2de]"></a>strftime</STRONG> (Thumb, 636 bytes, Stack size 72 bytes, strftime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_findweek
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_open_sensor_file(unsigned char)
</UL>

<P><STRONG><a name="[462]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[374]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[e6]"></a>__rt_locale</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_locale_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[3a0]"></a>__rt_new_handler_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_new_handler_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_new_handler_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[3a1]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_ddtor_pointer_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ddtor_pointer_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[465]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[3a4]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[e4]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[3a6]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; error &rArr;  exit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[37d]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>

<P><STRONG><a name="[c0]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[377]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[52]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> __2sprintf.o(.text)
<LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[3a7]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[da]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[dc]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3a8]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d2]"></a>_printf_longlong_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[3ab]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[ce]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d6]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[385]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3ac]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[383]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char_file
</UL>

<P><STRONG><a name="[53]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[386]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[3b0]"></a>_scanf_mbtowc</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3b2]"></a>_scanf_wctomb</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3b4]"></a>_scanf_wstring</STRONG> (Thumb, 202 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3b5]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3ba]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3b6]"></a>__filbuf</STRONG> (Thumb, 476 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[3d8]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[467]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[3d9]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
</UL>

<P><STRONG><a name="[468]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[38b]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[3bc]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwrite
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[38e]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3b7]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[38c]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ed]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[3be]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[3bf]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[397]"></a>asctime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asctime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[398]"></a>_localtime_r</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[469]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[3ae]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3a3]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3aa]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[57]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isspace &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[46a]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>_printf_fp_dec_real</STRONG> (Thumb, 616 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[3cc]"></a>_printf_fp_hex_real</STRONG> (Thumb, 750 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[376]"></a>_printf_char_file</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, _printf_char_file_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2fprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfprintf
</UL>

<P><STRONG><a name="[3cd]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[de]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[e0]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[3ad]"></a>__vfscanf</STRONG> (Thumb, 872 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[3d3]"></a>_scanf_really_real</STRONG> (Thumb, 668 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[382]"></a>__vfscanf_char_file</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, scanf_char_file_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfscanf
</UL>

<P><STRONG><a name="[3af]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3b3]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[46b]"></a>___backspace$unlocked$orig</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, backspace.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>___backspace$unlocked</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, backspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ___backspace$unlocked
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ungetc_internal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[1fa]"></a>fgets</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, fgets_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::gets(char*, int)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_from_file(std::__FILE*, sensor_config*)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_config_read_file(std::__FILE*, sensor_config*)
</UL>

<P><STRONG><a name="[1f6]"></a>fputs</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fputs_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::puts(const char*)
</UL>

<P><STRONG><a name="[2ef]"></a>fread</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, freadfast_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
</UL>

<P><STRONG><a name="[2f0]"></a>fwrite</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, fwritefast_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyFH(std::__FILE*, std::__FILE*)
</UL>

<P><STRONG><a name="[3b9]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[3b1]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[3a9]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table &rArr; __rt_locale
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[3c1]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[3bd]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[3a5]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[3c0]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[3c2]"></a>_asctime_r</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[46c]"></a>_n$asctime_r</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxmm.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>__rt_heap_expand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heapauxmm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[3c3]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[3da]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[3cb]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3c5]"></a>_btod_etento</STRONG> (Thumb, 212 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d7]"></a>_ungetc_internal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ungetc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___backspace$unlocked
</UL>

<P><STRONG><a name="[46d]"></a>ungetc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ungetc.o(.text), UNUSED)

<P><STRONG><a name="[3df]"></a>abort</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_terminate_handler()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[3dd]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[3db]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[3dc]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[3de]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[3e1]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[46e]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_eh_globals_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_eh_globals_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[470]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[3e5]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3e6]"></a>_scanf_really_hex_real</STRONG> (Thumb, 778 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[407]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[3e0]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[3e3]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[471]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[473]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[3e9]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[3c6]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3eb]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[3ea]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[3ee]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[3ec]"></a>_e2d</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[3ed]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[3c7]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d2]"></a>_btod_edivd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3c8]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d1]"></a>_btod_emuld</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[3ef]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[64]"></a>FATDirHandle::~FATDirHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatdirhandle.o(i._ZN12FATDirHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FATDirHandle::~FATDirHandle__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[63]"></a>FATDirHandle::~FATDirHandle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatdirhandle.o(i._ZN12FATDirHandleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatdirhandle.o(.constdata__ZTV12FATDirHandle)
</UL>
<P><STRONG><a name="[474]"></a>FATDirHandle::~FATDirHandle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fatdirhandle.o(i._ZN12FATDirHandleD1Ev), UNUSED)

<P><STRONG><a name="[6d]"></a>FATFileHandle::~FATFileHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fatfilehandle.o(i._ZN13FATFileHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FATFileHandle::~FATFileHandle__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[6c]"></a>FATFileHandle::~FATFileHandle()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fatfilehandle.o(i._ZN13FATFileHandleD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFileHandle::~FATFileHandle()
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fatfilehandle.o(.constdata__ZTV13FATFileHandle)
</UL>
<P><STRONG><a name="[475]"></a>FATFileHandle::~FATFileHandle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fatfilehandle.o(i._ZN13FATFileHandleD1Ev), UNUSED)

<P><STRONG><a name="[77]"></a>FATFileSystem::disk_status()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem11disk_statusEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[76]"></a>FATFileSystem::disk_initialize()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem15disk_initializeEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[79]"></a>FATFileSystem::disk_sync()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfilesystem.o(i._ZN13FATFileSystem9disk_syncEv))
<BR>[Address Reference Count : 1]<UL><LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[4b]"></a>mbed::CANMessage::CANMessage()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, busprotocol.o(i._ZN4mbed10CANMessageC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeueOutput()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BusProtocol_cpp_can1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busprotocol.o(.text)
</UL>
<P><STRONG><a name="[476]"></a>mbed::CANMessage::CANMessage__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, busprotocol.o(i._ZN4mbed10CANMessageC1Ev), UNUSED)

<P><STRONG><a name="[2f4]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, busout.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_file_ops_cpp_myled1
</UL>

<P><STRONG><a name="[477]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, busout.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[2e5]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, file_ops.o(i._ZN4mbed10DigitalOutaSEi), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handleError(const char*)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledShowProgress()
</UL>

<P><STRONG><a name="[81]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, retarget.o(i._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[87]"></a>mbed::BaseDirHandle::readdir()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandle7readdirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::BaseDirHandle::readdir() &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getName()
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::get(int)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[8a]"></a>mbed::BaseDirHandle::seekdir(long)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandle7seekdirEl))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[89]"></a>mbed::BaseDirHandle::telldir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandle7telldirEv))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[86]"></a>mbed::BaseDirHandle::closedir()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandle8closedirEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::BaseDirHandle::closedir()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[88]"></a>mbed::BaseDirHandle::rewinddir()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandle9rewinddirEv))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[8c]"></a>mbed::BaseDirHandle::~BaseDirHandle__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandleD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed::BaseDirHandle::~BaseDirHandle__deallocating() &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::~BaseDirHandle()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[8b]"></a>mbed::BaseDirHandle::~BaseDirHandle()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandleD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::~BaseDirHandle__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed13BaseDirHandleE)
</UL>
<P><STRONG><a name="[478]"></a>mbed::BaseDirHandle::~BaseDirHandle__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed13BaseDirHandleD1Ev), UNUSED)

<P><STRONG><a name="[91]"></a>mbed::FileSystemLike::mkdir(const char*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed14FileSystemLike5mkdirEPKci))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[8f]"></a>mbed::FileSystemLike::remove(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed14FileSystemLike6removeEPKc))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[72]"></a>mbed::FileSystemLike::rename(const char*, const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed14FileSystemLike6renameEPKcS2_))
<BR>[Address Reference Count : 3]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
<LI> mcifilesystem.o(.constdata__ZTV13MCIFileSystem)
</UL>
<P><STRONG><a name="[90]"></a>mbed::FileSystemLike::opendir(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed14FileSystemLike7opendirEPKc))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
</UL>
<P><STRONG><a name="[47]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(.text)
<LI> serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> uart_rtos_interrupt.o(.text)
</UL>
<P><STRONG><a name="[479]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[26a]"></a>mbed::Ticker::attach_us(void(*)(), unsigned long long)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, adc_4088.o(i._ZN4mbed6Ticker9attach_usEPFvvEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::Ticker::attach_us(void(*)(), unsigned long long) &rArr; mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;register_ADC_interrupt
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_ADC_Conversion()
</UL>

<P><STRONG><a name="[4c]"></a>mbed::Ticker::~Ticker()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ticker.o(i._ZN4mbed6TickerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Ticker::~Ticker() &rArr; mbed::Ticker::detach() &rArr; mbed::TimerEvent::remove() &rArr; us_ticker_remove_event
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::detach()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ticker.o(.constdata__ZTVN4mbed6TickerE)
<LI> adc_4088.o(.text)
</UL>
<P><STRONG><a name="[47a]"></a>mbed::Ticker::~Ticker__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ticker.o(i._ZN4mbed6TickerD1Ev), UNUSED)

<P><STRONG><a name="[1e8]"></a>mbed::AnalogIn::AnalogIn(PinName)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, main.o(i._ZN4mbed8AnalogInC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = mbed::AnalogIn::AnalogIn(PinName) &rArr; analogin_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
</UL>

<P><STRONG><a name="[47b]"></a>mbed::AnalogIn::AnalogIn__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed8AnalogInC1E7PinName), UNUSED)

<P><STRONG><a name="[aa]"></a>mbed::DirHandle::seekdir(long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed9DirHandle7seekdirEl))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
</UL>
<P><STRONG><a name="[a9]"></a>mbed::DirHandle::telldir()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, filesystemlike.o(i._ZN4mbed9DirHandle7telldirEv))
<BR>[Address Reference Count : 1]<UL><LI> filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
</UL>
<P><STRONG><a name="[24f]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[1f2]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = operator delete (void*) &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__deallocating()
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::~MCIFileSystem()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__deallocating()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__deallocating()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::~TimerEvent__deallocating()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::~CAN__deallocating()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::BaseDirHandle::~BaseDirHandle__deallocating()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::~FileSystemLike__deallocating()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase__deallocating()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::~FATFileSystem__deallocating()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::~FATFileHandle__deallocating()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATDirHandle::~FATDirHandle__deallocating()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::~MCIFileSystem__deallocating()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[246]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread(void(*)(const void*), void*, osPriority, unsigned, unsigned char*)
</UL>

<P><STRONG><a name="[20a]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileSystemLike::opendir()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::opendir(const char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[3ca]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_atexit</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, aeabi_atexit.o(i.__aeabi_atexit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_mcifs
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_ADC_4088_cpp_ticker
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BusProtocol_cpp_can1
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___23_UART_RTOS_Interrupt_cpp_5a0c9b47
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_BusProtocol_cpp_can1
</UL>

<P><STRONG><a name="[f0]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(i.__cxa_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __cxa_finalize &rArr; free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_1
</UL>

<P><STRONG><a name="[78]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 7]<UL><LI> stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> filesystemlike.o(.constdata__ZTVN4mbed14FileSystemLikeE)
<LI> timerevent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> filelike.o(.constdata__ZTVN4mbed8FileLikeE)
<LI> filesystemlike.o(.constdata__ZTVN4mbed9DirHandleE)
<LI> fatfilesystem.o(.constdata__ZTV13FATFileSystem)
</UL>
<P><STRONG><a name="[3f2]"></a>__hardfp_ldexp</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[3f5]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3d6]"></a>__mathlib_narrow</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __mathlib_narrow &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[3e8]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[380]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5a]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgets
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[59]"></a>_fputc$unlocked</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file_locked.o(.text)
</UL>
<P><STRONG><a name="[3f7]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[eb]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[58]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[298]"></a>rtos::MemoryPool&lang;CANmessage_t, (unsigned)50&rang;::free(CANmessage_t*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, processingloops.o(t._ZN4rtos10MemoryPoolI12CANmessage_tLj50EE4freeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtos::MemoryPool&lang;CANmessage_t, (unsigned)50&rang;::free(CANmessage_t*) &rArr; osPoolFree &rArr; sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[25b]"></a>rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::free(CANmessage_t*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, bushandler.o(t._ZN4rtos10MemoryPoolI12CANmessage_tLj800EE4freeEPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::free(CANmessage_t*) &rArr; osPoolFree &rArr; sysPoolFree
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyQueue()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[25d]"></a>rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::alloc()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bushandler.o(t._ZN4rtos10MemoryPoolI12CANmessage_tLj800EE5allocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtos::MemoryPool&lang;CANmessage_t, (unsigned)800&rang;::alloc() &rArr; osPoolAlloc &rArr; sysPoolAlloc &rArr; rt_clr_box
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>

<P><STRONG><a name="[297]"></a>rtos::Queue&lang;CANmessage_t, (unsigned)50&rang;::get(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, processingloops.o(t._ZN4rtos5QueueI12CANmessage_tLj50EE3getEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;CANmessage_t, (unsigned)50&rang;::get(unsigned) &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_loop(const void*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logger_loop(const void*)
</UL>

<P><STRONG><a name="[258]"></a>rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, bushandler.o(t._ZN4rtos5QueueI12CANmessage_tLj800EE3getEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::get(unsigned) &rArr; osMessageGet &rArr; isr_mbx_receive &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emptyQueue()
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_COM_thread(const void*)
</UL>

<P><STRONG><a name="[25e]"></a>rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bushandler.o(t._ZN4rtos5QueueI12CANmessage_tLj800EE3putEPS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = rtos::Queue&lang;CANmessage_t, (unsigned)800&rang;::put(CANmessage_t*, unsigned) &rArr; osMessagePut &rArr; isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueueMessage(unsigned, char*, char, char, msgType_t)
</UL>

<P><STRONG><a name="[3f8]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3fa]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
</UL>

<P><STRONG><a name="[3fd]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[400]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[3f3]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[3ff]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[47c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[401]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[405]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[3f6]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[402]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3fc]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[403]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>

<P><STRONG><a name="[3f9]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[404]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[e2]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[47d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[47e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3fb]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[c4]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[c8]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[3fe]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[3f4]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[3ce]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[3d5]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[3d4]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[406]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[109]"></a>adc_read</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, analogin_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_u32
</UL>

<P><STRONG><a name="[10a]"></a>order</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, analogin_api.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read_u32
</UL>

<P><STRONG><a name="[108]"></a>adc_read_u32</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, analogin_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;order
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read_u16
</UL>

<P><STRONG><a name="[11f]"></a>can_disable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_monitor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_reset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
</UL>

<P><STRONG><a name="[118]"></a>can_irq</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = can_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_n
</UL>

<P><STRONG><a name="[11e]"></a>can_speed</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, can_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = can_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_frequency
</UL>

<P><STRONG><a name="[11a]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_irq_free
</UL>

<P><STRONG><a name="[124]"></a>can_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, can_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_monitor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_write
</UL>

<P><STRONG><a name="[12c]"></a>uart_irq</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, serial_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uart_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart4_irq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart3_irq
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart2_irq
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart1_irq
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart0_irq
</UL>

<P><STRONG><a name="[13c]"></a>gpio_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[146]"></a>gpio_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = gpio_write &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[147]"></a>_gpio_init_in</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = _gpio_init_in &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[148]"></a>_gpio_init_out</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_inout
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[192]"></a>rt_ms2tick</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessagePut
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalWait
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMessageGet
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcDelay
</UL>

<P><STRONG><a name="[17e]"></a>rt_tid2ptcb</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalGet
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalClear
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSignalSet
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadGetPriority
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadSetPriority
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcThreadTerminate
</UL>

<P><STRONG><a name="[197]"></a>rt_id2obj</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreDelete
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreRelease
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcSemaphoreWait
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexDelete
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexRelease
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcMutexWait
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerCall
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerDelete
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[199]"></a>rt_timer_insert</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_timer_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[198]"></a>rt_timer_remove</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerDelete
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStop
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcTimerStart
</UL>

<P><STRONG><a name="[19d]"></a>isrMessagePut</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = isrMessagePut &rArr; isr_mbx_send &rArr; rt_psq_enq &rArr; os_error &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_mbx_send
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysTimerTick
</UL>

<P><STRONG><a name="[1cc]"></a>rt_clr_box</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rt_cmsis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_clr_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysMailAlloc
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysPoolAlloc
</UL>

<P><STRONG><a name="[186]"></a>__get_CONTROL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[185]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_cmsis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailFree
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCAlloc
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailAlloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMailCreate
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolFree
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCAlloc
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolAlloc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalWait
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalGet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalClear
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSignalSet
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerDelete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStop
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerStart
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetPriority
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSetPriority
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadYield
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[1df]"></a>rt_ret_regs</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_cm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val2
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ret_val
</UL>

<P><STRONG><a name="[ad]"></a>__sti___8_main_cpp_mcifs</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_mcifs &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::MCIFileSystem(const char*, PinName)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[48]"></a>&lang;Func1&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func1&rang; &rArr; mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[49]"></a>&lang;Func1&rang;</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, serialbase.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = &lang;Func1&rang; &rArr; mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serialbase.o(.text)
</UL>
<P><STRONG><a name="[22f]"></a>init_serial()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = init_serial() &rArr; serial_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[ae]"></a>__sti___15_BusProtocol_cpp_can1</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, busprotocol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __sti___15_BusProtocol_cpp_can1 &rArr; mbed::CAN::CAN(PinName, PinName) &rArr; can_init &rArr; pinmap_pinout &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CAN::CAN(PinName, PinName)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CANMessage::CANMessage()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> busprotocol.o(.init_array)
</UL>
<P><STRONG><a name="[af]"></a>__sti___14_BusHandler_cpp_inQueue</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, bushandler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = __sti___14_BusHandler_cpp_inQueue &rArr; osMessageCreate &rArr; svcMessageCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bushandler.o(.init_array)
</UL>
<P><STRONG><a name="[b0]"></a>__sti___12_ADC_4088_cpp_ticker</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, adc_4088.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___12_ADC_4088_cpp_ticker &rArr; __aeabi_atexit &rArr; malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __rt_heap_expand &rArr; __rt_heap_extend &rArr; sdram_init() &rArr; wait &rArr; wait_us &rArr; us_ticker_read &rArr; us_ticker_init &rArr; NVIC_SetVector
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adc_4088.o(.init_array)
</UL>
<P><STRONG><a name="[276]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, impact_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timestamp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_impact_input
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_impact_input
</UL>

<P><STRONG><a name="[275]"></a>NVIC_DisableIRQ(IRQn)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, impact_event.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timestamp
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dequeue_impact_input
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enqueue_impact_input
</UL>

<P><STRONG><a name="[28b]"></a>calibration()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calibration()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_timing()
</UL>

<P><STRONG><a name="[28d]"></a>sdram_test()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdram_test()
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmddly()
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_fbclkdly()
</UL>

<P><STRONG><a name="[28c]"></a>find_fbclkdly()</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_fbclkdly() &rArr; sdram_test()
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_test()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
</UL>

<P><STRONG><a name="[28e]"></a>find_cmddly()</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sdram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_cmddly() &rArr; sdram_test()
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_test()
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
</UL>

<P><STRONG><a name="[28f]"></a>pinConfig()</STRONG> (Thumb, 864 bytes, Stack size 0 bytes, sdram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdram_init()
</UL>

<P><STRONG><a name="[b1]"></a>__sti___19_ProcessingLoops_cpp_outQueue</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, processingloops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = __sti___19_ProcessingLoops_cpp_outQueue &rArr; osMessageCreate &rArr; svcMessageCreate &rArr; sysThreadError &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPoolCreate
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> processingloops.o(.init_array)
</UL>
<P><STRONG><a name="[b2]"></a>__sti___12_file_ops_cpp_myled1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, file_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = __sti___12_file_ops_cpp_myled1 &rArr; mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_mode &rArr; pin_mode &rArr; mbed_assert_internal &rArr;  mbed_die (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> file_ops.o(.init_array)
</UL>
<P><STRONG><a name="[2fa]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_sectors()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_sync()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_write(const unsigned char*, unsigned long long)
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_read(unsigned char*, unsigned long long)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_status()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[50]"></a>mymciirq()</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mymciirq() &rArr; MCIFileSystem::mci_MCIIRQHandler() &rArr; MCIFileSystem::mci_IRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_FIFOIRQHandler(unsigned char*, unsigned*, unsigned char*, unsigned*) &rArr; MCIFileSystem::mci_WriteFIFO(unsigned*, bool) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_MCIIRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>mydmairq()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mydmairq() &rArr; MCIFileSystem::mci_DMAIRQHandler()
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_DMAIRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mcifilesystem.o(.text)
</UL>
<P><STRONG><a name="[308]"></a>NVIC_EnableIRQ(IRQn)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcifilesystem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::mci_SetupEventWakeup(unsigned char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::initMCI()
</UL>

<P><STRONG><a name="[322]"></a>debug(const char*, ...)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, mcifilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = debug(const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCIFileSystem::disk_initialize()
</UL>

<P><STRONG><a name="[332]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fatfilehandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::fsync()
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::lseek(long, int)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::read(void*, unsigned)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileHandle::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[339]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, fatfilesystem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::FATFileSystem__sub_object(const char*)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::remove(const char*)
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::open(const char*, int)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFileSystem::format()
</UL>

<P><STRONG><a name="[341]"></a>debug_if(int, const char*, ...)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, diskio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
</UL>

<P><STRONG><a name="[354]"></a>mem_cpy(void*, const void*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[349]"></a>mem_set(void*, int, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set(void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[357]"></a>mem_cmp(const void*, const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp(const void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[35f]"></a>chk_chr(const char*, int)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
</UL>

<P><STRONG><a name="[347]"></a>move_window(FATFS*, unsigned long)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync(FATFS*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[348]"></a>sync(FATFS*)</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sync(FATFS*) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl(unsigned char, unsigned char, void*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[34c]"></a>remove_chain(FATFS*, unsigned long)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = remove_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[34d]"></a>create_chain(FATFS*, unsigned long)</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat(FATFS*, unsigned long, unsigned long)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[34e]"></a>dir_sdi(FATFS_DIR*, unsigned short)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = dir_sdi(FATFS_DIR*, unsigned short) &rArr; get_fat(FATFS*, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[350]"></a>dir_next(FATFS_DIR*, int)</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat(FATFS*, unsigned long)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect(FATFS*, unsigned long)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain(FATFS*, unsigned long)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove(FATFS_DIR*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[362]"></a>ld_clust(FATFS*, unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ld_clust(FATFS*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[366]"></a>st_clust(unsigned char*, unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[351]"></a>cmp_lfn(unsigned short*, unsigned char*)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn(unsigned short*, unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[359]"></a>pick_lfn(unsigned short*, unsigned char*)</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn(unsigned short*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
</UL>

<P><STRONG><a name="[35b]"></a>fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[356]"></a>sum_sfn(const unsigned char*)</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn(const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read(FATFS_DIR*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
</UL>

<P><STRONG><a name="[355]"></a>dir_find(FATFS_DIR*)</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn(unsigned short*, unsigned char*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp(const void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register(FATFS_DIR*)
</UL>

<P><STRONG><a name="[358]"></a>dir_read(FATFS_DIR*)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = dir_read(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn(unsigned short*, unsigned char*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[35a]"></a>dir_register(FATFS_DIR*)</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = dir_register(FATFS_DIR*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname(unsigned char*, const unsigned char*, const unsigned short*, unsigned short)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn(const unsigned char*)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn(const unsigned short*, unsigned char*, unsigned char, unsigned char)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy(void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[35c]"></a>dir_remove(FATFS_DIR*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = dir_remove(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next(FATFS_DIR*, int)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window(FATFS*, unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[35d]"></a>create_name(FATFS_DIR*, const char**)</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name(FATFS_DIR*, const char**) &rArr; mem_set(void*, int, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr(const char*, int)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set(void*, int, unsigned)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path(FATFS_DIR*, const char*)
</UL>

<P><STRONG><a name="[360]"></a>get_fileinfo(FATFS_DIR*, FILINFO*)</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fileinfo(FATFS_DIR*, FILINFO*) &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[361]"></a>follow_path(FATFS_DIR*, const char*)</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = follow_path(FATFS_DIR*, const char*) &rArr; dir_find(FATFS_DIR*) &rArr; dir_next(FATFS_DIR*, int) &rArr; create_chain(FATFS*, unsigned long) &rArr; put_fat(FATFS*, unsigned long, unsigned long) &rArr; move_window(FATFS*, unsigned long) &rArr; disk_write(unsigned char, const unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name(FATFS_DIR*, const char**)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find(FATFS_DIR*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust(FATFS*, unsigned char*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi(FATFS_DIR*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[363]"></a>check_fs(FATFS*, unsigned long)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = check_fs(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted(const char**, FATFS**, unsigned char)
</UL>

<P><STRONG><a name="[364]"></a>chk_mounted(const char**, FATFS**, unsigned char)</STRONG> (Thumb, 904 bytes, Stack size 80 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = chk_mounted(const char**, FATFS**, unsigned char) &rArr; check_fs(FATFS*, unsigned long) &rArr; disk_read(unsigned char, unsigned char*, unsigned long, unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs(FATFS*, unsigned long)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read(unsigned char, unsigned char*, unsigned long, unsigned char)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[365]"></a>validate(void*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = validate(void*) &rArr; disk_status(unsigned char) &rArr; debug_if(int, const char*, ...) &rArr; __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[36d]"></a>gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, gpdma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpdma_transfer(GPDMA_Channel_CFG_T*, unsigned, unsigned, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer_from_mci(unsigned char, unsigned, unsigned)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpdma_transfer_to_mci(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[b3]"></a>__sti___23_UART_RTOS_Interrupt_cpp_5a0c9b47</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart_rtos_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = __sti___23_UART_RTOS_Interrupt_cpp_5a0c9b47 &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_rtos_interrupt.o(.init_array)
</UL>
<P><STRONG><a name="[372]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[391]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[399]"></a>_tm_carry</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[39a]"></a>_isoweek</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, strftime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_yeardays
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_weekbasedyear
</UL>

<P><STRONG><a name="[39d]"></a>_findweek</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strftime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[39b]"></a>_yeardays</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, strftime.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>

<P><STRONG><a name="[39c]"></a>_weekbasedyear</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strftime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_isoweek
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strftime
</UL>

<P><STRONG><a name="[55]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[3c4]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3d0]"></a>_fp_value</STRONG> (Thumb, 508 bytes, Stack size 88 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5c]"></a>__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
