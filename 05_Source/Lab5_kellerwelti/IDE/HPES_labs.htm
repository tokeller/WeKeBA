<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\HPES_labs.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\HPES_labs.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Wed Apr 16 17:17:45 2014
<BR><P>
<H3>Maximum Stack Usage =        792 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Cmd_ls &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[10]">Reset_Handler</a>
 <LI><a href="#[15]">SysTick_Handler</a>
 <LI><a href="#[11a]">__user_initial_stackheap</a>
 <LI><a href="#[11]">NmiSR</a>
 <LI><a href="#[12]">FaultISR</a>
 <LI><a href="#[13]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">NmiSR</a><BR>
 <LI><a href="#[12]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">FaultISR</a><BR>
 <LI><a href="#[13]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">IntDefaultHandler</a><BR>
 <LI><a href="#[39]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">BufferCallback</a> from sound.o(.text) referenced 4 times from sound.o(.text)
 <LI><a href="#[b]">Cmd_cat</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[f]">Cmd_dummy</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[9]">Cmd_help</a> from main.o(.text) referenced 6 times from main.o(.data)
 <LI><a href="#[a]">Cmd_ls</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[d]">Cmd_pause</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[c]">Cmd_play</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[e]">Cmd_stop</a> from main.o(.text) referenced 2 times from main.o(.data)
 <LI><a href="#[12]">FaultISR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[22]">IntDefaultHandler</a> from interrupt.o(.text) referenced from interrupt.o(.text)
 <LI><a href="#[13]">IntDefaultHandler</a> from startup.o(RESET) referenced 117 times from startup.o(RESET)
 <LI><a href="#[11]">NmiSR</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[10]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">SVC_Handler</a> from hal_cm3.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[17]">SoundIntHandler</a> from sound.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from hal_cm3.o(.emb_text) referenced from startup.o(RESET)
 <LI><a href="#[16]">UARTStdioIntHandler</a> from uartstdio.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b2]">UART_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b1]">audioplay_task</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[b5]">init</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[23]">os_idle_demon</a> from rtx_config.o(.text) referenced from rt_task.o(i.rt_sys_init)
 <LI><a href="#[18]">rt_alloc_box</a> from rt_membox.o(i.rt_alloc_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[1e]">rt_dly_wait</a> from rt_time.o(i.rt_dly_wait) referenced from main.o(.text)
 <LI><a href="#[19]">rt_free_box</a> from rt_membox.o(i.rt_free_box) referenced from hal_cm3.o(.emb_text)
 <LI><a href="#[20]">rt_mut_init</a> from rt_mutex.o(i.rt_mut_init) referenced from main.o(.text)
 <LI><a href="#[1c]">rt_mut_release</a> from rt_mutex.o(i.rt_mut_release) referenced 2 times from main.o(.text)
 <LI><a href="#[1b]">rt_mut_wait</a> from rt_mutex.o(i.rt_mut_wait) referenced 2 times from main.o(.text)
 <LI><a href="#[21]">rt_sys_init</a> from rt_task.o(i.rt_sys_init) referenced from main.o(.text)
 <LI><a href="#[1d]">rt_tsk_create</a> from rt_task.o(i.rt_tsk_create) referenced from main.o(.text)
 <LI><a href="#[1f]">rt_tsk_delete</a> from rt_task.o(i.rt_tsk_delete) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[10]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[27]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[19d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[19f]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a0]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1a1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[31]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[28]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1a4]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1a5]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1a6]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1aa]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1ac]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2a]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000022))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1af]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[36]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[2c]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1b6]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1b7]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1b8]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1b9]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1ba]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1bb]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[26]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1bc]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2e]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[32]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; finit &rArr; fat_init &rArr; init_dev &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1be]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[35]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[37]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[dc]"></a>CPUcpsid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterDisable
</UL>

<P><STRONG><a name="[1c0]"></a>CPUprimask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)

<P><STRONG><a name="[da]"></a>CPUcpsie</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cpu.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
</UL>

<P><STRONG><a name="[eb]"></a>CPUwfi</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDeepSleep
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlSleep
</UL>

<P><STRONG><a name="[de]"></a>CPUbasepriSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskSet
</UL>

<P><STRONG><a name="[e0]"></a>CPUbasepriGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpu.o(.emb_text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntPriorityMaskGet
</UL>

<P><STRONG><a name="[39]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[196]"></a>rt_set_PSP</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[b4]"></a>os_set_env</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c1]"></a>_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[1c2]"></a>_free_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[14]"></a>SVC_Handler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)

<P><STRONG><a name="[3b]"></a>Sys_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, hal_cm3.o(.emb_text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, hal_cm3.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1c4]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[121]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[3e]"></a>_sys_open</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[41]"></a>_sys_close</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _sys_close &rArr; __fclose &rArr; fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[43]"></a>_sys_write</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[45]"></a>_sys_read</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[10c]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[47]"></a>_sys_seek</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _sys_seek &rArr; __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[49]"></a>_sys_ensure</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
</UL>

<P><STRONG><a name="[4b]"></a>_sys_flen</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sys_flen &rArr; __getfsize &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1c5]"></a>_sys_tmpnam</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>_sys_command_string</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[4d]"></a>spi_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, spi_lm3s37x8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = spi_init &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[55]"></a>spi_hi_speed</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, spi_lm3s37x8.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = spi_hi_speed &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIEnable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIDisable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[17e]"></a>spi_ss</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_lm3s37x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[17d]"></a>spi_send</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, spi_lm3s37x8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[57]"></a>ledInit_hal</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ledInit_hal &rArr; GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>ledOff_hal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5a]"></a>ledOn_hal</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5b]"></a>led_gn_off_hal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5c]"></a>led_gn_on_hal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5d]"></a>led_or_off_hal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5e]"></a>led_or_on_hal</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hal_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinWrite
</UL>

<P><STRONG><a name="[5f]"></a>PinoutSet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hal_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PinoutSet &rArr; SysCtlPeripheralEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>sysInit_hal</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, hal_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sysInit_hal &rArr; UARTStdioInit &rArr; UARTStdioInitExpClk &rArr; UARTFlushTx &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAEnable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAControlBaseSet
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockSet
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMasterEnable
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>CmdLineProcess</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, cmdline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CmdLineProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_task
</UL>

<P><STRONG><a name="[6b]"></a>UARTFlushTx</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UARTFlushTx &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_help
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[6d]"></a>UARTFlushRx</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTFlushRx
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>

<P><STRONG><a name="[6c]"></a>UARTStdioInitExpClk</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTStdioInitExpClk &rArr; UARTFlushTx &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushRx
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInit
</UL>

<P><STRONG><a name="[65]"></a>UARTStdioInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UARTStdioInit &rArr; UARTStdioInitExpClk &rArr; UARTFlushTx &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioInitExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[6e]"></a>UARTwrite</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[70]"></a>UARTgets</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UARTgets &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_task
</UL>

<P><STRONG><a name="[71]"></a>UARTgetc</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, uartstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>

<P><STRONG><a name="[72]"></a>UARTprintf</STRONG> (Thumb, 638 bytes, Stack size 72 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UARTprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_task
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audioplay_task
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_play
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_dummy
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_help
</UL>

<P><STRONG><a name="[73]"></a>UARTRxBytesAvail</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, uartstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount
</UL>

<P><STRONG><a name="[75]"></a>UARTTxBytesFree</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount
</UL>

<P><STRONG><a name="[76]"></a>UARTPeek</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uartstdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBufferCount
</UL>

<P><STRONG><a name="[1c7]"></a>UARTEchoSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uartstdio.o(.text), UNUSED)

<P><STRONG><a name="[16]"></a>UARTStdioIntHandler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTStdioIntHandler &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferFull
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>SoundBufferPlay</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SoundBufferPlay &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCallback
</UL>

<P><STRONG><a name="[80]"></a>SoundInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoundInit &rArr; TLV320AIC23BInit &rArr; GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeDisable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReset
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxRxEnable
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxFIFOLimitSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxEnable
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SRxFIFOLimitSet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntClear
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>SoundIntHandler</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SoundIntHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelModeGet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntStatus
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>SoundSetFormat</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SoundSetFormat &rArr; SysCtlI2SMClkSet
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelControlSet
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeEnable
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlI2SMClkSet
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxConfigSet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SRxConfigSet
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SMasterClockSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
</UL>

<P><STRONG><a name="[92]"></a>SoundPlay</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNextTone
</UL>

<P><STRONG><a name="[1c8]"></a>SoundSampleRateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sound.o(.text), UNUSED)

<P><STRONG><a name="[93]"></a>SoundBufferRead</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelTransferSet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelEnable
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAChannelAttributeEnable
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SRxEnable
</UL>

<P><STRONG><a name="[95]"></a>SoundVolumeSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SoundVolumeSet &rArr; TLV320AIC23BHeadPhoneVolumeSet &rArr; TLV320AIC23BWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BHeadPhoneVolumeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeUp
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeDown
</UL>

<P><STRONG><a name="[97]"></a>SoundVolumeDown</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeSet
</UL>

<P><STRONG><a name="[1c9]"></a>SoundVolumeGet</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, sound.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>SoundVolumeUp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeSet
</UL>

<P><STRONG><a name="[a0]"></a>TLV320AIC23BLineInVolumeSet</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tlv320aic23b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TLV320AIC23BLineInVolumeSet &rArr; TLV320AIC23BWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
</UL>

<P><STRONG><a name="[96]"></a>TLV320AIC23BHeadPhoneVolumeSet</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tlv320aic23b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TLV320AIC23BHeadPhoneVolumeSet &rArr; TLV320AIC23BWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeSet
</UL>

<P><STRONG><a name="[83]"></a>TLV320AIC23BInit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, tlv320aic23b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TLV320AIC23BInit &rArr; GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinRead
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BLineInVolumeSet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BHeadPhoneVolumeSet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralEnable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlClockGet
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[1ca]"></a>TLV320AIC23BHeadPhoneVolumeGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tlv320aic23b.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>Cmd_help</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmd_help &rArr; UARTprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Cmd_dummy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmd_dummy &rArr; UARTprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>Cmd_ls</STRONG> (Thumb, 60 bytes, Stack size 288 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = Cmd_ls &rArr; ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>Cmd_cat</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = Cmd_cat &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>Cmd_play</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Cmd_play &rArr; UARTprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>Cmd_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>Cmd_pause</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>BufferCallback</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>WaveOpen</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = WaveOpen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audioplay_task
</UL>

<P><STRONG><a name="[ae]"></a>Convert8Bit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveRead
</UL>

<P><STRONG><a name="[ad]"></a>WaveRead</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = WaveRead &rArr; fread &rArr; _readbuf &rArr; _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Convert8Bit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
</UL>

<P><STRONG><a name="[af]"></a>WavePlay</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WavePlay &rArr; fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveRead
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;audioplay_task
</UL>

<P><STRONG><a name="[b1]"></a>audioplay_task</STRONG> (Thumb, 394 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = audioplay_task &rArr; WaveOpen &rArr; fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>UART_task</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_task &rArr; UARTprintf &rArr; UARTwrite &rArr; UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b5]"></a>init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; finit &rArr; fat_init &rArr; init_dev &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_set_env
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundVolumeSet
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit_hal
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[23]"></a>os_idle_demon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> rt_task.o(i.rt_sys_init)
</UL>
<P><STRONG><a name="[199]"></a>os_tmr_call</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>

<P><STRONG><a name="[18f]"></a>os_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtx_config.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_stk_check
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
</UL>

<P><STRONG><a name="[b6]"></a>__user_perthread_libspace</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[b8]"></a>_mutex_initialize</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[b9]"></a>_mutex_acquire</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush$locked
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[ba]"></a>_mutex_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtx_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;feof
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush$locked
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[4f]"></a>GPIODirModeSet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECITx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECIRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLPC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeFan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetMII
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEPI
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeComparator
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1cb]"></a>GPIODirModeGet</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>GPIOIntTypeSet</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>GPIOIntTypeGet</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>GPIOPadConfigSet</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIOPadConfigSet
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBDigital
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUSBAnalog
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeTimer
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeSSI
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeQEI
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePWM
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECITx
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypePECIRx
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeLPC
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2CSCL
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutputOD
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeFan
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetMII
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEthernetLED
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeEPI
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeComparator
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeCAN
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeADC
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2C
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOInput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeI2S
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeUART
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPinTypeGPIOOutput
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[1ce]"></a>GPIOPadConfigGet</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>GPIOPinIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>GPIOPinIntDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>GPIOPinIntStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>GPIOPinIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>GPIOPortIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOGetIntNumber
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[be]"></a>GPIOPortIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOGetIntNumber
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[a2]"></a>GPIOPinRead</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
</UL>

<P><STRONG><a name="[51]"></a>GPIOPinWrite</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_or_on_hal
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_or_off_hal
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gn_on_hal
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_gn_off_hal
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOn_hal
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOff_hal
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit_hal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[c0]"></a>GPIOPinTypeADC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c1]"></a>GPIOPinTypeCAN</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c2]"></a>GPIOPinTypeComparator</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c3]"></a>GPIOPinTypeEPI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c4]"></a>GPIOPinTypeEthernetLED</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c5]"></a>GPIOPinTypeEthernetMII</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[c6]"></a>GPIOPinTypeFan</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[a1]"></a>GPIOPinTypeGPIOInput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPinTypeGPIOInput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
</UL>

<P><STRONG><a name="[58]"></a>GPIOPinTypeGPIOOutput</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPinTypeGPIOOutput &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit_hal
</UL>

<P><STRONG><a name="[c7]"></a>GPIOPinTypeGPIOOutputOD</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[a3]"></a>GPIOPinTypeI2C</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPinTypeI2C &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
</UL>

<P><STRONG><a name="[c8]"></a>GPIOPinTypeI2CSCL</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[82]"></a>GPIOPinTypeI2S</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPinTypeI2S &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[c9]"></a>GPIOPinTypeLPC</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[ca]"></a>GPIOPinTypePECIRx</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[cb]"></a>GPIOPinTypePECITx</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[cc]"></a>GPIOPinTypePWM</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[cd]"></a>GPIOPinTypeQEI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[ce]"></a>GPIOPinTypeSSI</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[cf]"></a>GPIOPinTypeTimer</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[64]"></a>GPIOPinTypeUART</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOPinTypeUART &rArr; GPIOPadConfigSet
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[d0]"></a>GPIOPinTypeUSBAnalog</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[d1]"></a>GPIOPinTypeUSBDigital</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPadConfigSet
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIODirModeSet
</UL>

<P><STRONG><a name="[1d3]"></a>GPIOPinConfigure</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>GPIODMATriggerEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>GPIODMATriggerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>GPIOADCTriggerEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d7]"></a>GPIOADCTriggerDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>I2CMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterInitExpClk
</UL>

<P><STRONG><a name="[a4]"></a>I2CMasterInitExpClk</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2CMasterInitExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
</UL>

<P><STRONG><a name="[d4]"></a>I2CSlaveEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSlaveInit
</UL>

<P><STRONG><a name="[d3]"></a>I2CSlaveInit</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CSlaveEnable
</UL>

<P><STRONG><a name="[1d8]"></a>I2CSlaveAddressSet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>I2CMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>I2CSlaveDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>I2CIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntNumberGet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[d7]"></a>I2CIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntNumberGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[1db]"></a>I2CMasterIntEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>I2CMasterIntEnableEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>I2CSlaveIntEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>I2CSlaveIntEnableEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>I2CMasterIntDisable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>I2CMasterIntDisableEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>I2CSlaveIntDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>I2CSlaveIntDisableEx</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>I2CMasterIntStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[1e3]"></a>I2CMasterIntStatusEx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>I2CSlaveIntStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>I2CSlaveIntStatusEx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>I2CMasterIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[1e6]"></a>I2CMasterIntClearEx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>I2CSlaveIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>I2CSlaveIntClearEx</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>I2CMasterSlaveAddrSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[1e9]"></a>I2CMasterLineStateGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>I2CMasterBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>I2CMasterBusBusy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>I2CMasterControl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[9e]"></a>I2CMasterErr</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[9b]"></a>I2CMasterDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BWriteRegister
</UL>

<P><STRONG><a name="[1ec]"></a>I2CMasterDataGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>I2CMasterTimeoutSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>I2CSlaveACKOverride</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>I2CSlaveACKValueSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>I2CSlaveStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>I2CSlaveDataPut</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>I2CSlaveDataGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>I2STxEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>

<P><STRONG><a name="[7f]"></a>I2STxDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufferCallback
</UL>

<P><STRONG><a name="[1f3]"></a>I2STxDataPut</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>I2STxDataPutNonBlocking</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>I2STxConfigSet</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[84]"></a>I2STxFIFOLimitSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[1f5]"></a>I2STxFIFOLimitGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>I2STxFIFOLevelGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>I2SRxEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
</UL>

<P><STRONG><a name="[1f7]"></a>I2SRxDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>I2SRxDataGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>I2SRxDataGetNonBlocking</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>I2SRxConfigSet</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[87]"></a>I2SRxFIFOLimitSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[1fa]"></a>I2SRxFIFOLimitGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>I2SRxFIFOLevelGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>I2STxRxEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[1fc]"></a>I2STxRxDisable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>I2STxRxConfigSet</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>I2SMasterClockSelect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, i2s.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2SMasterClockSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[1fe]"></a>I2SIntEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>I2SIntDisable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, i2s.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>I2SIntStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundIntHandler
</UL>

<P><STRONG><a name="[85]"></a>I2SIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundIntHandler
</UL>

<P><STRONG><a name="[d8]"></a>I2SIntRegister</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[d9]"></a>I2SIntUnregister</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, i2s.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[62]"></a>IntMasterEnable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IntMasterEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsie
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[db]"></a>IntMasterDisable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUcpsid
</UL>

<P><STRONG><a name="[bd]"></a>IntRegister</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAIntRegister
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntRegister
</UL>

<P><STRONG><a name="[bf]"></a>IntUnregister</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntUnregister
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAIntUnregister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntUnregister
</UL>

<P><STRONG><a name="[200]"></a>IntPriorityGroupingSet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>IntPriorityGroupingGet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>IntPrioritySet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>IntPriorityGet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>IntEnable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAIntRegister
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntRegister
</UL>

<P><STRONG><a name="[7a]"></a>IntDisable</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntUnregister
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uDMAIntUnregister
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlIntUnregister
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2SIntUnregister
</UL>

<P><STRONG><a name="[204]"></a>IntPendSet</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>IntPendClear</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, interrupt.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>IntPriorityMaskSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriSet
</UL>

<P><STRONG><a name="[df]"></a>IntPriorityMaskGet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUbasepriGet
</UL>

<P><STRONG><a name="[53]"></a>SSIConfigSetExpClk</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, ssi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SSIConfigSetExpClk
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[54]"></a>SSIEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[56]"></a>SSIDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
</UL>

<P><STRONG><a name="[e1]"></a>SSIIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntNumberGet
</UL>

<P><STRONG><a name="[e3]"></a>SSIIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntNumberGet
</UL>

<P><STRONG><a name="[206]"></a>SSIIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>SSIIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>SSIIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>SSIIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>SSIDataPut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>SSIDataPutNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>SSIDataGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>SSIDataGetNonBlocking</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>SSIDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>SSIDMADisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>SSIBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>SSIClockSourceSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>SSIClockSourceGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>SysCtlSRAMSizeGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>SysCtlFlashSizeGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>SysCtlPinPresent</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>SysCtlPeripheralPresent</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>SysCtlPeripheralReady</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[e6]"></a>SysCtlPeripheralPowerOn</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[e7]"></a>SysCtlPeripheralPowerOff</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralMapToNew
</UL>

<P><STRONG><a name="[81]"></a>SysCtlPeripheralReset</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SysCtlPeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[4e]"></a>SysCtlPeripheralEnable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlPeripheralEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinoutSet
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledInit_hal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[217]"></a>SysCtlPeripheralDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>SysCtlPeripheralSleepEnable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>SysCtlPeripheralSleepDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>SysCtlPeripheralDeepSleepEnable</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[21b]"></a>SysCtlPeripheralDeepSleepDisable</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[21c]"></a>SysCtlPeripheralClockGating</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>SysCtlIntRegister</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[e9]"></a>SysCtlIntUnregister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[21d]"></a>SysCtlIntEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>SysCtlIntDisable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>SysCtlIntClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>SysCtlIntStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>SysCtlLDOSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>SysCtlLDOGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>SysCtlLDOConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>SysCtlReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>SysCtlSleep</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[ec]"></a>SysCtlDeepSleep</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPUwfi
</UL>

<P><STRONG><a name="[225]"></a>SysCtlResetCauseGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[226]"></a>SysCtlResetCauseClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>SysCtlBrownOutConfigSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>SysCtlMOSCConfigSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>SysCtlPIOSCCalibrate</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>SysCtlClockSet</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysCtlClockSet
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[52]"></a>SysCtlClockGet</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtlClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[22a]"></a>SysCtlDeepSleepClockSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>SysCtlPWMClockSet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>SysCtlPWMClockGet</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>SysCtlADCSpeedSet</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>SysCtlADCSpeedGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>SysCtlIOSCVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>SysCtlMOSCVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>SysCtlPLLVerificationSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>SysCtlClkVerificationClear</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>SysCtlGPIOAHBEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>SysCtlGPIOAHBDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>SysCtlUSBPLLEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>SysCtlUSBPLLDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>SysCtlI2SMClkSet</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, sysctl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysCtlI2SMClkSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[237]"></a>UARTParityModeSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>UARTParityModeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>UARTFIFOLevelSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>UARTFIFOLevelGet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>UARTEnable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[ee]"></a>UARTDisable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTConfigSetExpClk
</UL>

<P><STRONG><a name="[ed]"></a>UARTConfigSetExpClk</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEnable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTDisable
</UL>

<P><STRONG><a name="[23b]"></a>UARTConfigGetExpClk</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>UARTFIFOEnable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>UARTFIFODisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>UARTEnableSIR</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>UARTDisableSIR</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>UARTSmartCardEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>UARTSmartCardDisable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>UARTModemControlSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>UARTModemControlClear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>UARTModemControlGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>UARTModemStatusGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>UARTFlowControlSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>UARTFlowControlGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>UARTTxIntModeSet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>UARTTxIntModeGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>UARTCharsAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>UARTSpaceAvail</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>UARTCharGetNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>UARTCharGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>UARTCharPutNonBlocking</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>UARTCharPut</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>UARTBreakCtl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>UARTBusy</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>UARTIntRegister</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntNumberGet
</UL>

<P><STRONG><a name="[f1]"></a>UARTIntUnregister</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntNumberGet
</UL>

<P><STRONG><a name="[252]"></a>UARTIntEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>UARTIntDisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>UARTIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>UARTIntClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>UARTDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>UARTDMADisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>UARTRxErrorGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>UARTRxErrorClear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>UARTClockSourceSet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>UARTClockSourceGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>UART9BitEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>UART9BitDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>UART9BitAddrSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>UART9BitAddrSend</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>uDMAEnable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[260]"></a>uDMADisable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[261]"></a>uDMAErrorStatusGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>uDMAErrorStatusClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>uDMAChannelEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>

<P><STRONG><a name="[263]"></a>uDMAChannelDisable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>uDMAChannelIsEnabled</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>uDMAControlBaseSet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sysInit_hal
</UL>

<P><STRONG><a name="[265]"></a>uDMAControlBaseGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>uDMAControlAlternateBaseGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>uDMAChannelRequest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>uDMAChannelAttributeEnable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[86]"></a>uDMAChannelAttributeDisable</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundInit
</UL>

<P><STRONG><a name="[268]"></a>uDMAChannelAttributeGet</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>uDMAChannelControlSet</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, udma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uDMAChannelControlSet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundSetFormat
</UL>

<P><STRONG><a name="[7b]"></a>uDMAChannelTransferSet</STRONG> (Thumb, 166 bytes, Stack size 28 bytes, udma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = uDMAChannelTransferSet
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferRead
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>

<P><STRONG><a name="[269]"></a>uDMAChannelScatterGatherSet</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>uDMAChannelSizeGet</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>uDMAChannelModeGet</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, udma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundIntHandler
</UL>

<P><STRONG><a name="[26b]"></a>uDMAChannelSelectSecondary</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>uDMAChannelSelectDefault</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>uDMAIntRegister</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, udma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntRegister
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
</UL>

<P><STRONG><a name="[f3]"></a>uDMAIntUnregister</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, udma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntUnregister
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
</UL>

<P><STRONG><a name="[26d]"></a>uDMAIntStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[26e]"></a>uDMAIntClear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>uDMAChannelAssign</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, udma.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[271]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[273]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[f4]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[a7]"></a>fgetc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fgetc_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[a9]"></a>fclose</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fclose_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fclose &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WavePlay
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[a8]"></a>feof</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, feof_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = feof &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[fb]"></a>freopen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[a6]"></a>fopen</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = fopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_cat
</UL>

<P><STRONG><a name="[aa]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_play
</UL>

<P><STRONG><a name="[142]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[fd]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[274]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[ff]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[278]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[f7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[27a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[100]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[3f]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdLineProcess
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>

<P><STRONG><a name="[27b]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[3]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_malloc_internal</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[fc]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = malloc &rArr; _malloc_internal &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[105]"></a>_free_internal</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[f6]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, h1_free_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = free &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[106]"></a>_readbuf</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _readbuf &rArr; _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[10b]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[108]"></a>__filbuf</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[115]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fgetc$unlocked
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fread
</UL>

<P><STRONG><a name="[27c]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _fseek &rArr; _sys_flen &rArr; __getfsize &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[27d]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[10e]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[f5]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[109]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[104]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rt_heap_descriptor_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[27e]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>

<P><STRONG><a name="[111]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[29]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[113]"></a>__Heap_Initialize</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, h1_init_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[4]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init_mt.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>_ftell_internal</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[280]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>fread</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, freadfast_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = fread &rArr; _readbuf &rArr; _sys_read &rArr; __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaveOpen
</UL>

<P><STRONG><a name="[2b]"></a>_initio</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[2d]"></a>_terminateio</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, initio_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[10a]"></a>_flushlinebuffered</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, flushlinebuffered_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[2f]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[281]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_twolibspace.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, h1_extend_mt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_ProvideMemory &rArr; _free_internal &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_free_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[119]"></a>_do_fflush</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush$locked
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[11b]"></a>_fflush$locked</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fflush_locked.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[118]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, setvbuf_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setvbuf &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[34]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[117]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[112]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[11e]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[11d]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[11f]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[120]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[42]"></a>__fclose</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, _fs_fclose.o(i.__fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __fclose &rArr; fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[4a]"></a>__flushbuf</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, _fs_flushbuf.o(i.__flushbuf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_ensure
</UL>

<P><STRONG><a name="[40]"></a>__fopen</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, _fs_fopen.o(i.__fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_params
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_drive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[4c]"></a>__getfsize</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, _fs_getfsize.o(i.__getfsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __getfsize &rArr; _mutex_release
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[46]"></a>__read</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, _fs_read.o(i.__read))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __read &rArr; fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
</UL>

<P><STRONG><a name="[48]"></a>__setfpos</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, _fs_setfpos.o(i.__setfpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __setfpos &rArr; fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[44]"></a>__write</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, _fs_write.o(i.__write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __write &rArr; fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[12c]"></a>_fcreate</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, _fs_fcreate.o(i._fcreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _fcreate &rArr; fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[129]"></a>_fdelete</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, _fs_fdelete.o(i._fdelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fdelete &rArr; fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[13d]"></a>_ffind</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, _fs_ffind.o(i._ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ffind &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[195]"></a>_init_box</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, rt_membox.o(i._init_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _init_box
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[194]"></a>dbg_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_init))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[19a]"></a>dbg_task_notify</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_notify))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
</UL>

<P><STRONG><a name="[193]"></a>dbg_task_switch</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_cm3.o(i.dbg_task_switch))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>

<P><STRONG><a name="[123]"></a>fat_close_write</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, fs_fat.o(i.fat_close_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fat_close_write &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
</UL>

<P><STRONG><a name="[12d]"></a>fat_create</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, fs_fat.o(i.fat_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = fat_create &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[12a]"></a>fat_delete</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, fs_fat.o(i.fat_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = fat_delete &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[162]"></a>fat_ffind</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.fat_ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[128]"></a>fat_find_file</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, fs_fat.o(i.fat_find_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[165]"></a>fat_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_fat.o(i.fat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fat_init &rArr; init_dev &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[131]"></a>fat_read</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, fs_fat.o(i.fat_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_read &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[135]"></a>fat_set_fpos</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, fs_fat.o(i.fat_set_fpos))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fat_set_fpos &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[136]"></a>fat_write</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, fs_fat.o(i.fat_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = fat_write &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[a5]"></a>ffind</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, fs_ffind.o(i.ffind))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ffind &rArr; fat_ffind &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_strpos
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_set_params
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_drive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_find_iob
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd_ls
</UL>

<P><STRONG><a name="[f8]"></a>_fgetc$unlocked</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fgetc$unlocked &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[b3]"></a>finit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fs_finit.o(i.finit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = finit &rArr; fat_init &rArr; init_dev &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>fn_cmp</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_lib.o(i.fn_cmp))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
</UL>

<P><STRONG><a name="[134]"></a>fs_AllocBlock</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_AllocBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fs_AllocBlock &rArr; fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_check_fwopen
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
</UL>

<P><STRONG><a name="[137]"></a>fs_BlockFull</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, _fs_flashio.o(i.fs_BlockFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_BlockFull &rArr; fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
</UL>

<P><STRONG><a name="[13b]"></a>fs_BlockInvalid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_BlockInvalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_BlockInvalid &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[16d]"></a>fs_EraseSector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_EraseSector))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[127]"></a>fs_Find_File</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, _fs_flashio.o(i.fs_Find_File))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fs_Find_File &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fn_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[16a]"></a>fs_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[13c]"></a>fs_InitBlock</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_InitBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_InitBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_EraseSector
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
</UL>

<P><STRONG><a name="[16f]"></a>fs_ProgramPage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_ProgramPage))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[133]"></a>fs_ReadBlock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_ReadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_ReadBlock &rArr; fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[13e]"></a>fs_ReadData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_lib.o(i.fs_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
</UL>

<P><STRONG><a name="[122]"></a>fs_WriteBlock</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_WriteBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_WriteBlock &rArr; fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ProgramPage
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ProgramPage
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__write
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flushbuf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fclose
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockFull
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[171]"></a>fs_WriteData</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_lib.o(i.fs_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[12e]"></a>fs_adr_sig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _fs_flashio.o(i.fs_adr_sig))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
</UL>

<P><STRONG><a name="[138]"></a>fs_check_fwopen</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, _fs_flashio.o(i.fs_check_fwopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fs_check_fwopen
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[124]"></a>fs_find_iob</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, fs_lib.o(i.fs_find_iob))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fs_find_iob &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[175]"></a>fs_get_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_date))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
</UL>

<P><STRONG><a name="[125]"></a>fs_get_drive</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, fs_lib.o(i.fs_get_drive))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[12b]"></a>fs_get_freeID</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, _fs_flashio.o(i.fs_get_freeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_get_freeID &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[139]"></a>fs_get_freeMem</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_get_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_get_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[17b]"></a>fs_get_time</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_time.o(i.fs_get_time))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
</UL>

<P><STRONG><a name="[132]"></a>fs_mark_fileMem</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, _fs_flashio.o(i.fs_mark_fileMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fs_mark_fileMem &rArr; fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read
</UL>

<P><STRONG><a name="[13a]"></a>fs_mark_freeMem</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, _fs_flashio.o(i.fs_mark_freeMem))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fs_mark_freeMem &rArr; fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_adr_sig
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
</UL>

<P><STRONG><a name="[130]"></a>fs_rd_alloc</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_rd_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_rd_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeID
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_BlockInvalid
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_freeMem
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_freeMem
</UL>

<P><STRONG><a name="[12f]"></a>fs_rd_sig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, _fs_flashio.o(i.fs_rd_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_rd_sig
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_spi_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__setfpos
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__getfsize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_AllocBlock
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mark_fileMem
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdelete
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcreate
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
</UL>

<P><STRONG><a name="[126]"></a>fs_set_params</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, fs_lib.o(i.fs_set_params))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fopen
</UL>

<P><STRONG><a name="[16e]"></a>fs_spi_EraseSector</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_EraseSector))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_InitBlock
</UL>

<P><STRONG><a name="[16b]"></a>fs_spi_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finit
</UL>

<P><STRONG><a name="[170]"></a>fs_spi_ProgramPage</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_ProgramPage))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_WriteBlock
</UL>

<P><STRONG><a name="[13f]"></a>fs_spi_ReadData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fs_flashprg.o(i.fs_spi_ReadData))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_sig
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_rd_alloc
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ReadBlock
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_Find_File
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffind
</UL>

<P><STRONG><a name="[169]"></a>fs_strpos</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fs_lib.o(i.fs_strpos))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ffind
</UL>

<P><STRONG><a name="[166]"></a>mmc_init</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = mmc_init &rArr; spi_hi_speed &rArr; SSIConfigSetExpClk
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_hi_speed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[14f]"></a>mmc_read_sect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_mmc.o(i.mmc_read_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[14e]"></a>mmc_write_sect</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, fs_mmc.o(i.mmc_write_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_ss
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>

<P><STRONG><a name="[18]"></a>rt_alloc_box</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_membox.o(i.rt_alloc_box))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[181]"></a>rt_block</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rt_task.o(i.rt_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_dly
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dly_wait
</UL>

<P><STRONG><a name="[185]"></a>rt_chk_robin</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rt_robin.o(i.rt_chk_robin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[187]"></a>rt_dec_dly</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, rt_list.o(i.rt_dec_dly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[188]"></a>rt_dispatch</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rt_task.o(i.rt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
</UL>

<P><STRONG><a name="[1e]"></a>rt_dly_wait</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rt_time.o(i.rt_dly_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_dly_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>rt_evt_psh</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rt_event.o(i.rt_evt_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[19]"></a>rt_free_box</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, rt_membox.o(i.rt_free_box))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_cm3.o(.emb_text)
</UL>
<P><STRONG><a name="[183]"></a>rt_get_first</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rt_list.o(i.rt_get_first))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[197]"></a>rt_init_robin</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_robin.o(i.rt_init_robin))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[18d]"></a>rt_init_stack</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_cm3.o(i.rt_init_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_init_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>

<P><STRONG><a name="[18e]"></a>rt_mbx_psh</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, rt_mailbox.o(i.rt_mbx_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[20]"></a>rt_mut_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rt_mutex.o(i.rt_mut_init))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>rt_mut_release</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rt_mutex.o(i.rt_mut_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rt_mut_release &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>rt_mut_wait</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, rt_mutex.o(i.rt_mut_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_mut_wait &rArr; rt_block &rArr; rt_put_dly
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> rtx_config.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>rt_pop_req</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, rt_system.o(i.rt_pop_req), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[182]"></a>rt_put_dly</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rt_list.o(i.rt_put_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_put_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[186]"></a>rt_put_prio</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, rt_list.o(i.rt_put_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>

<P><STRONG><a name="[189]"></a>rt_put_rdy_first</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rt_list.o(i.rt_put_rdy_first))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>

<P><STRONG><a name="[190]"></a>rt_resort_prio</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_list.o(i.rt_resort_prio))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_resort_prio &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_wait
</UL>

<P><STRONG><a name="[18b]"></a>rt_rmv_dly</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rt_list.o(i.rt_rmv_dly))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_rmv_dly
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mut_release
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_psh
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mbx_psh
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_evt_psh
</UL>

<P><STRONG><a name="[192]"></a>rt_rmv_list</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rt_list.o(i.rt_rmv_list))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_delete
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_resort_prio
</UL>

<P><STRONG><a name="[191]"></a>rt_sem_psh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_semaphore.o(i.rt_sem_psh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_prio
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
</UL>

<P><STRONG><a name="[3a]"></a>rt_stk_check</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rt_system.o(i.rt_stk_check))
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[184]"></a>rt_switch_req</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_task.o(i.rt_switch_req))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_pop_req
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_block
</UL>

<P><STRONG><a name="[21]"></a>rt_sys_init</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, rt_task.o(i.rt_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rt_sys_init &rArr; rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_PSP
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_robin
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_box
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>rt_systick</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rt_system.o(i.rt_systick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_put_rdy_first
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_first
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_switch_req
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tmr_tick
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dec_dly
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_chk_robin
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_Handler
</UL>

<P><STRONG><a name="[198]"></a>rt_tmr_tick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rt_timer.o(i.rt_tmr_tick), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_tmr_call
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_systick
</UL>

<P><STRONG><a name="[1d]"></a>rt_tsk_create</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_create &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_context
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>rt_tsk_delete</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, rt_task.o(i.rt_tsk_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rt_tsk_delete &rArr; rt_dispatch &rArr; rt_put_prio
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_list
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_rmv_dly
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_box
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_task_notify
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b7]"></a>rt_tsk_self</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_task.o(i.rt_tsk_self))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IsBufferFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsBufferFull
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[6a]"></a>IsBufferEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgetc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTgets
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTFlushTx
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPrimeTransmit
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[74]"></a>GetBufferCount</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, uartstdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTxBytesFree
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRxBytesAvail
</UL>

<P><STRONG><a name="[69]"></a>UARTPrimeTransmit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, uartstdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UARTPrimeTransmit &rArr; IsBufferEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsBufferEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTwrite
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTStdioIntHandler
</UL>

<P><STRONG><a name="[78]"></a>PatternNext</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, sound.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundNextTone
</UL>

<P><STRONG><a name="[77]"></a>SoundNextTone</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, sound.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PatternNext
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundPlay
</UL>

<P><STRONG><a name="[1a]"></a>BufferCallback</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, sound.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = BufferCallback &rArr; SoundBufferPlay &rArr; uDMAChannelTransferSet
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2STxDisable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SoundBufferPlay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sound.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>TLV320AIC23BWriteRegister</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, tlv320aic23b.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TLV320AIC23BWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterSlaveAddrSet
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntStatus
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterIntClear
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterErr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterDataPut
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CMasterControl
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BLineInVolumeSet
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TLV320AIC23BHeadPhoneVolumeSet
</UL>

<P><STRONG><a name="[bc]"></a>GPIOGetIntNumber</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntUnregister
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOPortIntRegister
</UL>

<P><STRONG><a name="[d6]"></a>I2CIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntUnregister
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CIntRegister
</UL>

<P><STRONG><a name="[22]"></a>IntDefaultHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> interrupt.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>SSIIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ssi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntUnregister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSIIntRegister
</UL>

<P><STRONG><a name="[e5]"></a>SysCtlPeripheralMapToNew</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sysctl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPowerOff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralPowerOn
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlPeripheralReady
</UL>

<P><STRONG><a name="[f0]"></a>UARTIntNumberGet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntUnregister
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTIntRegister
</UL>

<P><STRONG><a name="[18c]"></a>rt_init_context</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rt_task.o(i.rt_init_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_init_context &rArr; rt_init_stack
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_stack
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_alloc_box
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tsk_create
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sys_init
</UL>

<P><STRONG><a name="[140]"></a>alloc_name</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, fs_fat.o(i.alloc_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = alloc_name &rArr; alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[146]"></a>alloc_new_clus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.alloc_new_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = alloc_new_clus &rArr; get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EOC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[14d]"></a>cache_fat</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.cache_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[141]"></a>check_lfn</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_fat.o(i.check_lfn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[151]"></a>check_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.check_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[153]"></a>chk_dir_empty</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_fat.o(i.chk_dir_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = chk_dir_empty &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[147]"></a>clear_clus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_fat.o(i.clear_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = clear_clus &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[148]"></a>clus_to_sect</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fs_fat.o(i.clus_to_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[156]"></a>count_free_clus</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, fs_fat.o(i.count_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = count_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[158]"></a>cvt_fatname</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fs_fat.o(i.cvt_fatname))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cvt_fatname &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>

<P><STRONG><a name="[15a]"></a>delete_entries</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, fs_fat.o(i.delete_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = delete_entries &rArr; unlink_clus_chain &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
</UL>

<P><STRONG><a name="[15f]"></a>fat_find_dir</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, fs_fat.o(i.fat_find_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[161]"></a>find_name</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fs_fat.o(i.find_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = find_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_file
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_delete
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[14b]"></a>get_EOC</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fs_fat.o(i.get_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[172]"></a>get_bootrec</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, fs_fat.o(i.get_bootrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_bootrec &rArr; read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[174]"></a>get_date</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, fs_fat.o(i.get_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_date
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_date
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[143]"></a>get_dir_sect</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fs_fat.o(i.get_dir_sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dir_sect &rArr; clus_to_sect
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[157]"></a>get_fat_sect</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fs_fat.o(i.get_fat_sect))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
</UL>

<P><STRONG><a name="[14a]"></a>get_free_clus</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, fs_fat.o(i.get_free_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_free_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[176]"></a>get_fsinfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fs_fat.o(i.get_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_fsinfo &rArr; read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[177]"></a>get_mbrec</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, fs_fat.o(i.get_mbrec))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_mbrec &rArr; read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[163]"></a>get_next_info</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, fs_fat.o(i.get_next_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_next_info &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_ffind
</UL>

<P><STRONG><a name="[179]"></a>get_nt_name</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, fs_fat.o(i.get_nt_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_nt_name &rArr; val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
</UL>

<P><STRONG><a name="[17a]"></a>get_time</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fs_fat.o(i.get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_time
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
</UL>

<P><STRONG><a name="[173]"></a>get_u32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fs_fat.o(i.get_u32))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_clus
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
</UL>

<P><STRONG><a name="[167]"></a>init_dev</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, fs_fat.o(i.init_dev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = init_dev &rArr; write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_free_clus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_init
</UL>

<P><STRONG><a name="[145]"></a>is_EOC</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fs_fat.o(i.is_EOC))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[178]"></a>lfn_calc_chksum</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fs_fat.o(i.lfn_calc_chksum))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
</UL>

<P><STRONG><a name="[168]"></a>read_cache</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fs_fat.o(i.read_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_cache &rArr; read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
</UL>

<P><STRONG><a name="[15d]"></a>read_last_entry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fs_fat.o(i.read_last_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_last_entry &rArr; read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
</UL>

<P><STRONG><a name="[149]"></a>read_sector</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, fs_fat.o(i.read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_sector &rArr; mmc_read_sect &rArr; mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_last_entry
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_cache
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mbrec
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fsinfo
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bootrec
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[152]"></a>search_for_name</STRONG> (Thumb, 546 bytes, Stack size 136 bytes, fs_fat.o(i.search_for_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_next_clus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_name
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
</UL>

<P><STRONG><a name="[144]"></a>set_next_clus</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, fs_fat.o(i.set_next_clus))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_set_fpos
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_read
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_for_name
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_info
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_dir_empty
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_name
</UL>

<P><STRONG><a name="[19b]"></a>set_u16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_fat.o(i.set_u16))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink_clus_chain
</UL>

<P><STRONG><a name="[19c]"></a>set_u32</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fs_fat.o(i.set_u32))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fat_link
</UL>

<P><STRONG><a name="[15c]"></a>unlink_clus_chain</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, fs_fat.o(i.unlink_clus_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = unlink_clus_chain &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_EOC
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[159]"></a>val_char</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fs_fat.o(i.val_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = val_char
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char_sn
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
</UL>

<P><STRONG><a name="[150]"></a>val_char_sn</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, fs_fat.o(i.val_char_sn))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;val_char
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
</UL>

<P><STRONG><a name="[155]"></a>write_cache</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, fs_fat.o(i.write_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_fsinfo
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
</UL>

<P><STRONG><a name="[164]"></a>write_dot_entries</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, fs_fat.o(i.write_dot_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_dot_entries &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[160]"></a>write_entries</STRONG> (Thumb, 700 bytes, Stack size 144 bytes, fs_fat.o(i.write_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_sector
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sector
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfn_calc_chksum
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nt_name
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dir_sect
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_date
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cvt_fatname
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clus_to_sect
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_clus
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_name
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_lfn
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_create
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_find_dir
</UL>

<P><STRONG><a name="[14c]"></a>write_fat_link</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, fs_fat.o(i.write_fat_link))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_fat_link &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u16
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_u32
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat_sect
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_write
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_new_clus
</UL>

<P><STRONG><a name="[15e]"></a>write_fsinfo</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, fs_fat.o(i.write_fsinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = write_fsinfo &rArr; write_cache &rArr; write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_dev
</UL>

<P><STRONG><a name="[15b]"></a>write_sector</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fs_fat.o(i.write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write_sector &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fat_close_write
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_entries
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_dot_entries
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cache
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_entries
</UL>

<P><STRONG><a name="[17c]"></a>mmc_command</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, fs_mmc.o(i.mmc_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_block
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_block
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_init
</UL>

<P><STRONG><a name="[17f]"></a>mmc_read_block</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, fs_mmc.o(i.mmc_read_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mmc_read_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_read_sect
</UL>

<P><STRONG><a name="[180]"></a>mmc_write_block</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fs_mmc.o(i.mmc_write_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_command
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_write_sect
</UL>

<P><STRONG><a name="[f9]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, fopen_locked.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; __fopen &rArr; fat_find_file &rArr; fat_find_dir &rArr; write_entries &rArr; check_name &rArr; search_for_name &rArr; set_next_clus &rArr; cache_fat &rArr; mmc_write_sect &rArr; mmc_write_block &rArr; mmc_command
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[102]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_alloc_mt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_malloc_internal
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
